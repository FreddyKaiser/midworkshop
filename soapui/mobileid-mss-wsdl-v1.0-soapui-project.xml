<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Swisscom MOBILEID" resourceRoot="${projectDir}" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="MSS_StatusQuery" type="wsdl" bindingName="{http://nevis.ch/esauth/wsdl/mss.wsdl}MSS_StatusQueryPortSoapBinding" soapVersion="1_2" anonymous="optional" definition="file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl"><con:part><con:url>file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="MSS" targetNamespace="http://nevis.ch/esauth/wsdl/mss.wsdl" xmlns:tns="http://nevis.ch/esauth/wsdl/mss.wsdl" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:wsoap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <wsdl:types>
    <xs:schema targetNamespace="http://www.w3.org/2001/04/xmlenc#" version="1.0" elementFormDefault="qualified">
      <xs:complexType name="EncryptedType" abstract="true">
        <xs:sequence>
          <xs:element name="EncryptionMethod" type="xenc:EncryptionMethodType" minOccurs="0"/>
          <xs:element ref="ds:KeyInfo" minOccurs="0"/>
          <xs:element ref="xenc:CipherData"/>
          <xs:element ref="xenc:EncryptionProperties" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <xs:attribute name="Encoding" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:complexType name="EncryptionMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="KeySize" minOccurs="0" type="xenc:KeySizeType"/>
          <xs:element name="OAEPparams" minOccurs="0" type="xs:base64Binary"/>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:simpleType name="KeySizeType">
        <xs:restriction base="xs:integer"/>
      </xs:simpleType>
      <xs:element name="CipherData" type="xenc:CipherDataType"/>
      <xs:complexType name="CipherDataType">
        <xs:choice>
          <xs:element name="CipherValue" type="xs:base64Binary"/>
          <xs:element ref="xenc:CipherReference"/>
        </xs:choice>
      </xs:complexType>
      <xs:element name="CipherReference" type="xenc:CipherReferenceType"/>
      <xs:complexType name="CipherReferenceType">
        <xs:choice>
          <xs:element name="Transforms" type="xenc:TransformsType" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="URI" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:complexType name="TransformsType">
        <xs:sequence>
          <xs:element ref="ds:Transform" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="EncryptedData" type="xenc:EncryptedDataType"/>
      <xs:complexType name="EncryptedDataType">
        <xs:complexContent>
          <xs:extension base="xenc:EncryptedType"></xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <!--Children of ds:KeyInfo-->
      <xs:element name="EncryptedKey" type="xenc:EncryptedKeyType"/>
      <xs:complexType name="EncryptedKeyType">
        <xs:complexContent>
          <xs:extension base="xenc:EncryptedType">
            <xs:sequence>
              <xs:element ref="xenc:ReferenceList" minOccurs="0"/>
              <xs:element name="CarriedKeyName" type="xs:string" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="Recipient" type="xs:string" use="optional"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="AgreementMethod" type="xenc:AgreementMethodType"/>
      <xs:complexType name="AgreementMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="KA-Nonce" minOccurs="0" type="xs:base64Binary"/>
          <!--<xs:element ref="ds:DigestMethod" minOccurs="0"/>-->
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="OriginatorKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
          <xs:element name="RecipientKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--End Children of ds:KeyInfo-->
      <xs:element name="ReferenceList">
        <xs:complexType>
          <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="DataReference" type="xenc:ReferenceType"/>
            <xs:element name="KeyReference" type="xenc:ReferenceType"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ReferenceType">
        <xs:sequence>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="URI" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="EncryptionProperties" type="xenc:EncryptionPropertiesType"/>
      <xs:complexType name="EncryptionPropertiesType">
        <xs:sequence>
          <xs:element ref="xenc:EncryptionProperty" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="EncryptionProperty" type="xenc:EncryptionPropertyType"/>
      <xs:complexType name="EncryptionPropertyType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
        <xs:attribute name="Target" type="xs:anyURI" use="optional"/>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:anyAttribute namespace="http://www.w3.org/XML/1998/namespace"/>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/2000/09/xmldsig#" version="0.1" elementFormDefault="qualified">
      <!--Basic Types Defined for Signatures-->
      <xs:simpleType name="CryptoBinary">
        <xs:restriction base="xs:base64Binary"></xs:restriction>
      </xs:simpleType>
      <!--Start Signature-->
      <xs:element name="Signature" type="ds:SignatureType"/>
      <xs:complexType name="SignatureType">
        <xs:sequence>
          <xs:element ref="ds:SignedInfo"/>
          <xs:element ref="ds:SignatureValue"/>
          <xs:element ref="ds:KeyInfo" minOccurs="0"/>
          <xs:element ref="ds:Object" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureValue" type="ds:SignatureValueType"/>
      <xs:complexType name="SignatureValueType">
        <xs:simpleContent>
          <xs:extension base="xs:base64Binary">
            <xs:attribute name="Id" type="xs:ID" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <!--Start SignedInfo-->
      <xs:element name="SignedInfo" type="ds:SignedInfoType"/>
      <xs:complexType name="SignedInfoType">
        <xs:sequence>
          <xs:element ref="ds:CanonicalizationMethod"/>
          <xs:element ref="ds:SignatureMethod"/>
          <xs:element ref="ds:Reference" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="CanonicalizationMethod" type="ds:CanonicalizationMethodType"/>
      <xs:complexType name="CanonicalizationMethodType" mixed="true">
        <xs:sequence>
          <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded"/>
          <!--(0,unbounded) elements from (1,1) namespace-->
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="SignatureMethod" type="ds:SignatureMethodType"/>
      <xs:complexType name="SignatureMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
          <!--(0,unbounded) elements from (1,1) external namespace-->
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--Start Reference-->
      <xs:element name="Reference" type="ds:ReferenceType"/>
      <xs:complexType name="ReferenceType">
        <xs:sequence>
          <xs:element ref="ds:Transforms" minOccurs="0"/>
          <xs:element ref="ds:DigestMethod"/>
          <xs:element ref="ds:DigestValue"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="URI" type="xs:anyURI" use="optional"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:element name="Transforms" type="ds:TransformsType"/>
      <xs:complexType name="TransformsType">
        <xs:sequence>
          <xs:element ref="ds:Transform" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="Transform" type="ds:TransformType"/>
      <xs:complexType name="TransformType" mixed="true">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
          <!--(1,1) elements from (0,unbounded) namespaces-->
          <xs:element name="XPath" type="xs:string"/>
        </xs:choice>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--End Reference-->
      <xs:element name="DigestMethod" type="ds:DigestMethodType"/>
      <xs:complexType name="DigestMethodType" mixed="true">
        <xs:sequence>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="DigestValue" type="ds:DigestValueType"/>
      <xs:simpleType name="DigestValueType">
        <xs:restriction base="xs:base64Binary"/>
      </xs:simpleType>
      <!--End SignedInfo-->
      <!--Start KeyInfo-->
      <xs:element name="KeyInfo" type="ds:KeyInfoType"/>
      <xs:complexType name="KeyInfoType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="ds:KeyName"/>
          <xs:element ref="ds:KeyValue"/>
          <xs:element ref="ds:RetrievalMethod"/>
          <xs:element ref="ds:X509Data"/>
          <xs:element ref="ds:PGPData"/>
          <xs:element ref="ds:SPKIData"/>
          <xs:element ref="ds:MgmtData"/>
          <xs:any processContents="lax" namespace="##other"/>
          <!--(1,1) elements from (0,unbounded) namespaces-->
        </xs:choice>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="KeyName" type="xs:string"/>
      <xs:element name="MgmtData" type="xs:string"/>
      <xs:element name="KeyValue" type="ds:KeyValueType"/>
      <xs:complexType name="KeyValueType" mixed="true">
        <xs:choice>
          <xs:element ref="ds:DSAKeyValue"/>
          <xs:element ref="ds:RSAKeyValue"/>
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
      </xs:complexType>
      <xs:element name="RetrievalMethod" type="ds:RetrievalMethodType"/>
      <xs:complexType name="RetrievalMethodType">
        <xs:sequence>
          <xs:element ref="ds:Transforms" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="URI" type="xs:anyURI"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <!--Start X509Data-->
      <xs:element name="X509Data" type="ds:X509DataType"/>
      <xs:complexType name="X509DataType">
        <xs:sequence maxOccurs="unbounded">
          <xs:choice>
            <xs:element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/>
            <xs:element name="X509SKI" type="xs:base64Binary"/>
            <xs:element name="X509SubjectName" type="xs:string"/>
            <xs:element name="X509Certificate" type="xs:base64Binary"/>
            <xs:element name="X509CRL" type="xs:base64Binary"/>
            <xs:any namespace="##other" processContents="lax"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="X509IssuerSerialType">
        <xs:sequence>
          <xs:element name="X509IssuerName" type="xs:string"/>
          <xs:element name="X509SerialNumber" type="xs:integer"/>
        </xs:sequence>
      </xs:complexType>
      <!--End X509Data-->
      <!--Begin PGPData-->
      <xs:element name="PGPData" type="ds:PGPDataType"/>
      <xs:complexType name="PGPDataType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="PGPKeyID" type="xs:base64Binary"/>
            <xs:element name="PGPKeyPacket" type="xs:base64Binary" minOccurs="0"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="PGPKeyPacket" type="xs:base64Binary"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:choice>
      </xs:complexType>
      <!--End PGPData-->
      <!--Begin SPKIData-->
      <xs:element name="SPKIData" type="ds:SPKIDataType"/>
      <xs:complexType name="SPKIDataType">
        <xs:sequence maxOccurs="unbounded">
          <xs:element name="SPKISexp" type="xs:base64Binary"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <!--End SPKIData-->
      <!--End KeyInfo-->
      <!--Start Object (Manifest, SignatureProperty)-->
      <xs:element name="Object" type="ds:ObjectType"/>
      <xs:complexType name="ObjectType" mixed="true">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##any" processContents="lax"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <!--add a grep facet-->
        <xs:attribute name="Encoding" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:element name="Manifest" type="ds:ManifestType"/>
      <xs:complexType name="ManifestType">
        <xs:sequence>
          <xs:element ref="ds:Reference" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureProperties" type="ds:SignaturePropertiesType"/>
      <xs:complexType name="SignaturePropertiesType">
        <xs:sequence>
          <xs:element ref="ds:SignatureProperty" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureProperty" type="ds:SignaturePropertyType"/>
      <xs:complexType name="SignaturePropertyType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
          <!--(1,1) elements from (1,unbounded) namespaces-->
        </xs:choice>
        <xs:attribute name="Target" type="xs:anyURI" use="required"/>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <!--End Object (Manifest, SignatureProperty)-->
      <!--Start Algorithm Parameters-->
      <xs:simpleType name="HMACOutputLengthType">
        <xs:restriction base="xs:integer"/>
      </xs:simpleType>
      <!--Start KeyValue Element-types-->
      <xs:element name="DSAKeyValue" type="ds:DSAKeyValueType"/>
      <xs:complexType name="DSAKeyValueType">
        <xs:sequence>
          <xs:sequence minOccurs="0">
            <xs:element name="P" type="ds:CryptoBinary"/>
            <xs:element name="Q" type="ds:CryptoBinary"/>
          </xs:sequence>
          <xs:element name="G" type="ds:CryptoBinary" minOccurs="0"/>
          <xs:element name="Y" type="ds:CryptoBinary"/>
          <xs:element name="J" type="ds:CryptoBinary" minOccurs="0"/>
          <xs:sequence minOccurs="0">
            <xs:element name="Seed" type="ds:CryptoBinary"/>
            <xs:element name="PgenCounter" type="ds:CryptoBinary"/>
          </xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="RSAKeyValue" type="ds:RSAKeyValueType"/>
      <xs:complexType name="RSAKeyValueType">
        <xs:sequence>
          <xs:element name="Modulus" type="ds:CryptoBinary"/>
          <xs:element name="Exponent" type="ds:CryptoBinary"/>
        </xs:sequence>
      </xs:complexType>
      <!--End KeyValue Element-types-->
      <!--End Signature-->
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/2003/05/soap-envelope" elementFormDefault="qualified">
      <!--Envelope, header and body-->
      <xs:element name="Envelope" type="soapenv:Envelope"/>
      <xs:complexType name="Envelope">
        <xs:sequence>
          <xs:element ref="soapenv:Header" minOccurs="0"/>
          <xs:element ref="soapenv:Body" minOccurs="1"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="Header" type="soapenv:Header"/>
      <xs:complexType name="Header">
        <xs:annotation>
          <xs:documentation>Elements replacing the wildcard MUST be namespace qualified, but can be in the targetNamespace</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="Body" type="soapenv:Body"/>
      <xs:complexType name="Body">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <!--Global Attributes.  The following attributes are intended to be
	  usable via qualified attribute names on any complex type referencing
	  them.-->
      <xs:attribute name="mustUnderstand" type="xs:boolean" default="0"/>
      <xs:attribute name="relay" type="xs:boolean" default="0"/>
      <xs:attribute name="role" type="xs:anyURI"/>
      <!--'encodingStyle' indicates any canonicalization conventions
	  followed in the contents of the containing element.  For example, the
	  value 'http://www.w3.org/2003/05/soap-encoding' indicates the pattern
	  described in the SOAP Version 1.2 Part 2: Adjuncts Recommendation-->
      <xs:attribute name="encodingStyle" type="xs:anyURI"/>
      <xs:element name="Fault" type="soapenv:Fault"/>
      <xs:complexType name="Fault" final="extension">
        <xs:annotation>
          <xs:documentation>Fault reporting structure</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="Code" type="soapenv:faultcode"/>
          <xs:element name="Reason" type="soapenv:faultreason"/>
          <xs:element name="Node" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="Role" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="Detail" type="soapenv:detail" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="faultreason">
        <xs:sequence>
          <xs:element name="Text" type="soapenv:reasontext" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="reasontext">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="xml:lang" use="required"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="faultcode">
        <xs:sequence>
          <xs:element name="Value" type="soapenv:faultcodeEnum"/>
          <xs:element name="Subcode" type="soapenv:subcode" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="faultcodeEnum">
        <xs:restriction base="xs:QName">
          <xs:enumeration value="soapenv:DataEncodingUnknown"/>
          <xs:enumeration value="soapenv:MustUnderstand"/>
          <xs:enumeration value="soapenv:Receiver"/>
          <xs:enumeration value="soapenv:Sender"/>
          <xs:enumeration value="soapenv:VersionMismatch"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="subcode">
        <xs:sequence>
          <xs:element name="Value" type="xs:QName"/>
          <xs:element name="Subcode" type="soapenv:subcode" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="detail">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <!--Global element declaration and complex type definition for header entry returned due to a mustUnderstand fault-->
      <xs:element name="NotUnderstood" type="soapenv:NotUnderstoodType"/>
      <xs:complexType name="NotUnderstoodType">
        <xs:attribute name="qname" type="xs:QName" use="required"/>
      </xs:complexType>
      <!--Global element and associated types for managing version transition as described in Appendix A of the SOAP Version 1.2 Part 1 Recommendation-->
      <xs:complexType name="SupportedEnvType">
        <xs:attribute name="qname" type="xs:QName" use="required"/>
      </xs:complexType>
      <xs:element name="Upgrade" type="soapenv:UpgradeType"/>
      <xs:complexType name="UpgradeType">
        <xs:sequence>
          <xs:element name="SupportedEnvelope" type="soapenv:SupportedEnvType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://uri.etsi.org/TS102204/v1.1.2#" elementFormDefault="qualified">
      <xs:complexType name="MessageAbstractType" abstract="true">
        <xs:sequence>
          <xs:element name="AP_Info">
            <xs:complexType>
              <xs:attribute name="AP_ID" type="xs:anyURI" use="required"/>
              <xs:attribute name="AP_TransID" type="xs:NCName" use="required"/>
              <xs:attribute name="AP_PWD" type="xs:string" use="required"/>
              <xs:attribute name="Instant" type="xs:dateTime" use="required"/>
              <xs:attribute name="AP_URL" type="xs:anyURI" use="optional"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="MSSP_Info">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="MSSP_ID" type="mss:MeshMemberType"/>
              </xs:sequence>
              <xs:attribute name="Instant" type="xs:dateTime" use="optional"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="MajorVersion" type="xs:integer" use="required"/>
        <xs:attribute name="MinorVersion" type="xs:integer" use="required"/>
      </xs:complexType>
      <xs:element name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"/>
      <xs:complexType name="MSS_SignatureReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="DataToBeSigned" type="mss:DataType"/>
              <xs:element name="DataToBeDisplayed" type="mss:DataType" minOccurs="0"/>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="AdditionalServices" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Service" type="mss:AdditionalServiceType" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MSS_Format" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="KeyReference" type="mss:KeyReferenceType" minOccurs="0"/>
              <xs:element name="SignatureProfileComparison" type="mss:SignatureProfileComparisonType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="ValidityDate" type="xs:dateTime" use="optional"/>
            <xs:attribute name="TimeOut" type="xs:positiveInteger" use="optional"/>
            <xs:attribute name="MessagingMode" type="mss:MessagingModeType" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"/>
      <xs:complexType name="MSS_SignatureRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
      <xs:complexType name="MSS_StatusReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
      <xs:complexType name="MSS_StatusRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_RegistrationReq" type="mss:MSS_RegistrationReqType"/>
      <xs:complexType name="MSS_RegistrationReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
              <xs:element name="EncryptResponseBy" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
              <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_RegistrationResp" type="mss:MSS_RegistrationRespType"/>
      <xs:complexType name="MSS_RegistrationRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="Status" type="mss:StatusType"/>
              <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
              <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
              <xs:element name="PublicKey" type="xs:base64Binary" minOccurs="0"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ProfileReq" type="mss:MSS_ProfileReqType"/>
      <xs:complexType name="MSS_ProfileReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ProfileResp" type="mss:MSS_ProfileRespType"/>
      <xs:complexType name="MSS_ProfileRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
      <xs:complexType name="MSS_ReceiptReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="Status" type="mss:StatusType" minOccurs="0"/>
              <xs:element name="Message" type="mss:DataType" minOccurs="0"/>
              <xs:element name="SignedReceipt" type="ds:SignatureType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
      <xs:complexType name="MSS_ReceiptRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_HandshakeReq" type="mss:MSS_HandshakeReqType"/>
      <xs:complexType name="MSS_HandshakeReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SecureMethods">
                <xs:complexType>
                  <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="Certificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="RootCAs">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="DN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="SignatureAlgList">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_HandshakeResp" type="mss:MSS_HandshakeRespType"/>
      <xs:complexType name="MSS_HandshakeRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SecureMethods">
                <xs:complexType>
                  <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingMSSPCertificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingAPCertificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingSigAlgList">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="MobileUserType">
        <xs:sequence>
          <xs:element name="IdentityIssuer" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:element name="UserIdentifier" type="xs:string" minOccurs="0"/>
          <xs:element name="HomeMSSP" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:element name="MSISDN" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DataType">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute name="MimeType" type="xs:string" use="optional"/>
            <xs:attribute name="Encoding" type="xs:string" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="SignatureProfileComparisonType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="exact"/>
          <xs:enumeration value="minimum"/>
          <xs:enumeration value="better"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MessagingModeType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="synch"/>
          <xs:enumeration value="asynchClientServer"/>
          <xs:enumeration value="asynchServerServer"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="DigestAlgAndValueType">
        <xs:sequence>
          <xs:element name="DigestMethod" type="ds:DigestMethodType" minOccurs="0"/>
          <xs:element name="DigestValue" type="ds:DigestValueType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="mssURIType">
        <xs:sequence>
          <xs:element name="mssURI" type="xs:anyURI"/>
          <xs:element name="DigestAlgAndValue" type="mss:DigestAlgAndValueType" minOccurs="0"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MeshMemberType">
        <xs:sequence>
          <xs:element name="DNSName" type="xs:string" minOccurs="0"/>
          <xs:element name="IPAddress" type="xs:string" minOccurs="0"/>
          <xs:element name="URI" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="IdentifierString" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="KeyReferenceType">
        <xs:sequence>
          <xs:element name="CertificateURL" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="CertificateIssuerDN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HashOfUsersPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HashOfCAPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:any namespace="##other" processContents="lax"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SignatureType">
        <xs:choice>
          <xs:element name="XMLSignature" type="ds:SignatureType"/>
          <xs:element name="Base64Signature" type="xs:base64Binary"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0"/>
          <!--this can also be an advanced XML Signature-->
        </xs:choice>
      </xs:complexType>
      <xs:element name="MSS_MessageSignature">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="ds:Signature"/>
          </xs:sequence>
          <xs:attribute ref="soapenv:role" use="required"/>
          <xs:attribute ref="soapenv:mustUnderstand" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AdditionalServiceType">
        <xs:sequence>
          <xs:element name="Description" type="mss:mssURIType"/>
          <xs:element name="Entity" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="mss:StatusCodeType"/>
          <xs:element name="StatusMessage" type="xs:string" minOccurs="0"/>
          <xs:element name="StatusDetail" type="mss:StatusDetailType" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="StatusCodeType">
        <xs:sequence>
          <xs:element name="StatusCode" type="mss:StatusCodeType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Value" type="xs:integer" use="required"/>
      </xs:complexType>
      <xs:complexType name="StatusDetailType">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" xml:lang="en">
      <xs:annotation>
        <xs:documentation>
          <div>
            <h1>About the XML namespace</h1>
            <div class="bodytext">
              <p>This schema document describes the XML namespace, in a form
		      suitable for import by other schema documents.</p>
              <p>
                See
                <a href="http://www.w3.org/XML/1998/namespace.html">http://www.w3.org/XML/1998/namespace.html</a>
                and
                <a href="http://www.w3.org/TR/REC-xml">http://www.w3.org/TR/REC-xml</a>
                for information 
		      about this namespace.
              </p>
              <p>Note that local names in this namespace are intended to be
		      defined only by the World Wide Web Consortium or its subgroups.
		      The names currently defined in this namespace are listed below.
		      They should not be used with conflicting semantics by any Working
		      Group, specification, or document instance.</p>
              <p>
                See further below in this document for more information about
                <a href="#usage">how to refer to this schema document from your own
		      XSD schema documents</a>
                and about
                <a href="#nsversioning">the
		      namespace-versioning policy governing this schema document</a>
                .
              </p>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>lang (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       is a language code for the natural language of the content of
		       any element; its value is inherited.  This name is reserved
		       by virtue of its definition in the XML specification.</p>
            </div>
            <div>
              <h4>Notes</h4>
              <p>Attempting to install the relevant ISO 2- and 3-letter
		      codes as the enumerated possible values is probably never
		      going to be a realistic possibility.</p>
              <p>
                See BCP 47 at
                <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
                and the IANA language subtag registry at
                <a href="http://www.iana.org/assignments/language-subtag-registry">http://www.iana.org/assignments/language-subtag-registry</a>
                for further information.
              </p>
              <p>The union allows for the 'un-declaration' of xml:lang with
		      the empty string.</p>
            </div>
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:union memberTypes="xs:language">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value=""/>
              </xs:restriction>
            </xs:simpleType>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="space">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>space (as an attribute name)</h3>
              <p>denotes an attribute whose
		       value is a keyword indicating what whitespace processing
		       discipline is intended for the content of the element; its
		       value is inherited.  This name is reserved by virtue of its
		       definition in the XML specification.</p>
            </div>
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:NCName">
            <xs:enumeration value="default"/>
            <xs:enumeration value="preserve"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="base" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>base (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       provides a URI to be used as the base for interpreting any
		       relative URIs in the scope of the element on which it
		       appears; its value is inherited.  This name is reserved
		       by virtue of its definition in the XML Base specification.</p>
              <p>
                See
                <a href="http://www.w3.org/TR/xmlbase/">http://www.w3.org/TR/xmlbase/</a>
                for information about this attribute.
              </p>
            </div>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>id (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       should be interpreted as if declared to be of type ID.
		       This name is reserved by virtue of its definition in the
		       xml:id specification.</p>
              <p>
                See
                <a href="http://www.w3.org/TR/xml-id/">http://www.w3.org/TR/xml-id/</a>
                for information about this attribute.
              </p>
            </div>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup name="specialAttrs">
        <xs:attribute ref="xml:base"/>
        <xs:attribute ref="xml:lang"/>
        <xs:attribute ref="xml:space"/>
        <xs:attribute ref="xml:id"/>
      </xs:attributeGroup>
      <xs:annotation>
        <xs:documentation>
          <div>
            <h3>Father (in any context at all)</h3>
            <div class="bodytext">
              <p>denotes Jon Bosak, the chair of 
		      the original XML Working Group.  This name is reserved by 
		      the following decision of the W3C XML Plenary and 
		      XML Coordination groups:</p>
              <blockquote>
                <p>In appreciation for his vision, leadership and
			dedication the W3C XML Plenary on this 10th day of
			February, 2000, reserves for Jon Bosak in perpetuity
			the XML name "xml:Father".</p>
              </blockquote>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:annotation>
        <xs:documentation>
          <div xml:id="usage" id="usage">
            <h2>
              <a name="usage">About this schema document</a>
            </h2>
            <div class="bodytext">
              <p>
                This schema defines attributes and an attribute group suitable
		      for use by schemas wishing to allow
                <code>xml:base</code>
                ,
                <code>xml:lang</code>
                ,
                <code>xml:space</code>
                or
                <code>xml:id</code>
                attributes on elements they define.
              </p>
              <p>To enable this, such a schema must import this schema for
		      the XML namespace, e.g. as follows:</p>
              <pre>&lt;schema . . .>
		           . . .
		           &lt;import namespace="http://www.w3.org/XML/1998/namespace"
		                      schemaLocation="http://www.w3.org/2001/xml.xsd"/></pre>
              <p>or</p>
              <pre>&lt;import namespace="http://www.w3.org/XML/1998/namespace"
		                      schemaLocation="http://www.w3.org/2009/01/xml.xsd"/></pre>
              <p>Subsequently, qualified reference to any of the attributes or the
		      group defined below will have the desired effect, e.g.</p>
              <pre>&lt;type . . .>
		           . . .
		           &lt;attributeGroup ref="xml:specialAttrs"/></pre>
              <p>will define a type which will schema-validate an instance element
		      with any of those attributes.</p>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:annotation>
        <xs:documentation>
          <div id="nsversioning" xml:id="nsversioning">
            <h2>
              <a name="nsversioning">Versioning policy for this schema document</a>
            </h2>
            <div class="bodytext">
              <p>
                In keeping with the XML Schema WG's standard versioning
		      policy, this schema document will persist at
                <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                .
              </p>
              <p>
                At the date of issue it can also be found at
                <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
                .
              </p>
              <p>
                The schema document at that URI may however change in the future,
		      in order to remain compatible with the latest version of XML
		      Schema itself, or with the XML namespace itself.  In other words,
		      if the XML Schema or XML namespaces change, the version of this
		      document at
                <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
                will change accordingly; the version at
                <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                will not change.
              </p>
              <p>Previous dated (and unchanging) versions of this schema 
		      document are at:</p>
              <ul>
                <li>
                  <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2007/08/xml.xsd">http://www.w3.org/2007/08/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2004/10/xml.xsd">http://www.w3.org/2004/10/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2001/03/xml.xsd">http://www.w3.org/2001/03/xml.xsd</a>
                </li>
              </ul>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
    </xs:schema>
    <xs:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" version="0.1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <!--// Fault Codes ///////////////////////////////////////////-->
      <xs:simpleType name="tTimestampFault">
        <xs:annotation>
          <xs:documentation>This type defines the fault code value for Timestamp message expiration.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:QName">
          <xs:enumeration value="wsu:MessageExpired"/>
        </xs:restriction>
      </xs:simpleType>
      <!--// Global attributes ////////////////////////////////////-->
      <xs:attribute name="Id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>This global attribute supports annotating arbitrary elements with an ID.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup name="commonAtts">
        <xs:annotation>
          <xs:documentation>Convenience attribute group used to simplify this schema.</xs:documentation>
        </xs:annotation>
        <xs:attribute ref="wsu:Id" use="optional"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:attributeGroup>
      <!--// Utility types ////////////////////////////////////////-->
      <xs:complexType name="AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This type is for elements whose [children] is a psuedo-dateTime and can have arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attributeGroup ref="wsu:commonAtts"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="AttributedURI">
        <xs:annotation>
          <xs:documentation>This type is for elements whose [children] is an anyURI and can have arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:anyURI">
            <xs:attributeGroup ref="wsu:commonAtts"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <!--// Timestamp header components ///////////////////////////-->
      <xs:complexType name="TimestampType">
        <xs:annotation>
          <xs:documentation>This complex type ties together the timestamp related elements into a composite type.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element ref="wsu:Created" minOccurs="0"/>
          <xs:element ref="wsu:Expires" minOccurs="0"/>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any namespace="##other" processContents="lax"/>
          </xs:choice>
        </xs:sequence>
        <xs:attributeGroup ref="wsu:commonAtts"/>
      </xs:complexType>
      <xs:element name="Timestamp" type="wsu:TimestampType">
        <xs:annotation>
          <xs:documentation>This element allows Timestamps to be applied anywhere element wildcards are present,
	including as a SOAP header.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <!--global element decls to allow individual elements to appear anywhere-->
      <xs:element name="Expires" type="wsu:AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This element allows an expiration time to be applied anywhere element wildcards are present.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Created" type="wsu:AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This element allows a creation time to be applied anywhere element wildcards are present.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:schema>
    <xs:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" blockDefault="#all" version="0.2" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
      <xs:complexType name="AttributedString">
        <xs:annotation>
          <xs:documentation>This type represents an element with arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="wsu:Id"/>
            <xs:anyAttribute namespace="##other" processContents="lax"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="PasswordString">
        <xs:annotation>
          <xs:documentation>This type is used for password elements per Section 4.1.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:AttributedString">
            <xs:attribute name="Type" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="EncodedString">
        <xs:annotation>
          <xs:documentation>This type is used for elements containing stringified binary data.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:AttributedString">
            <xs:attribute name="EncodingType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="UsernameTokenType">
        <xs:annotation>
          <xs:documentation>This type represents a username token per Section 4.1</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="Username" type="wsse:AttributedString"/>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute ref="wsu:Id"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="BinarySecurityTokenType">
        <xs:annotation>
          <xs:documentation>A security token that is encoded in binary</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:EncodedString">
            <xs:attribute name="ValueType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="KeyIdentifierType">
        <xs:annotation>
          <xs:documentation>A security token key identifier</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:EncodedString">
            <xs:attribute name="ValueType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="tUsage">
        <xs:annotation>
          <xs:documentation>Typedef to allow a list of usages (as URIs).</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:anyURI"/>
      </xs:simpleType>
      <xs:attribute name="Usage" type="wsse:tUsage">
        <xs:annotation>
          <xs:documentation>This global attribute is used to indicate the usage of a referenced or indicated token within the containing context</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:complexType name="ReferenceType">
        <xs:annotation>
          <xs:documentation>This type represents a reference to an external security token.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="URI" type="xs:anyURI"/>
        <xs:attribute name="ValueType" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="EmbeddedType">
        <xs:annotation>
          <xs:documentation>This type represents a reference to an embedded security token.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any processContents="lax"/>
        </xs:choice>
        <xs:attribute name="ValueType" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="SecurityTokenReferenceType">
        <xs:annotation>
          <xs:documentation>This type is used reference a security token.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any processContents="lax"/>
        </xs:choice>
        <xs:attribute ref="wsu:Id"/>
        <xs:attribute ref="wsse:Usage"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="SecurityHeaderType">
        <xs:annotation>
          <xs:documentation>This complexType defines header block to use for security-relevant data directed at a specific SOAP actor.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>The use of "any" is to allow extensibility and different forms of security data.</xs:documentation>
            </xs:annotation>
          </xs:any>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="TransformationParametersType">
        <xs:annotation>
          <xs:documentation>This complexType defines a container for elements to be specified from any namespace as properties/parameters of a DSIG transformation.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>The use of "any" is to allow extensibility from any namespace.</xs:documentation>
            </xs:annotation>
          </xs:any>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="UsernameToken" type="wsse:UsernameTokenType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:UsernameToken element per Section 4.1.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BinarySecurityToken" type="wsse:BinarySecurityTokenType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:BinarySecurityToken element per Section 4.2.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Reference" type="wsse:ReferenceType">
        <xs:annotation>
          <xs:documentation>This element defines a security token reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Embedded" type="wsse:EmbeddedType">
        <xs:annotation>
          <xs:documentation>This element defines a security token embedded reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="KeyIdentifier" type="wsse:KeyIdentifierType">
        <xs:annotation>
          <xs:documentation>This element defines a key identifier reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SecurityTokenReference" type="wsse:SecurityTokenReferenceType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:SecurityTokenReference per Section 4.3.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Security" type="wsse:SecurityHeaderType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:Security SOAP header element per Section 4.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="TransformationParameters" type="wsse:TransformationParametersType">
        <xs:annotation>
          <xs:documentation>This element contains properties for transformations from any namespace, including DSIG.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Password" type="wsse:PasswordString"/>
      <xs:element name="Nonce" type="wsse:EncodedString"/>
      <xs:simpleType name="FaultcodeEnum">
        <xs:restriction base="xs:QName">
          <xs:enumeration value="wsse:UnsupportedSecurityToken"/>
          <xs:enumeration value="wsse:UnsupportedAlgorithm"/>
          <xs:enumeration value="wsse:InvalidSecurity"/>
          <xs:enumeration value="wsse:InvalidSecurityToken"/>
          <xs:enumeration value="wsse:FailedAuthentication"/>
          <xs:enumeration value="wsse:FailedCheck"/>
          <xs:enumeration value="wsse:SecurityTokenUnavailable"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="MSS_SignatureOutput">
    <wsdl:part name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MSS_SignatureInput">
    <wsdl:part name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MSS_StatusQueryInput">
    <wsdl:part name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
  </wsdl:message>
  <wsdl:message name="MSS_StatusQueryOutput">
    <wsdl:part name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
  </wsdl:message>
  <wsdl:message name="MSS_ReceiptInput">
    <wsdl:part name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
  </wsdl:message>
  <wsdl:message name="MSS_ReceiptOutput">
    <wsdl:part name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
  </wsdl:message>
  <wsdl:message name="MSS_FaultMessage">
    <wsdl:part name="MSS_Fault" element="soapenv:Fault"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="MSS_SignaturePortType">
    <wsdl:operation name="MSS_Signature">
      <wsdl:input message="tns:MSS_SignatureInput"/>
      <wsdl:output message="tns:MSS_SignatureOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="MSS_StatusQueryType">
    <wsdl:operation name="MSS_StatusQuery">
      <wsdl:input message="tns:MSS_StatusQueryInput"/>
      <wsdl:output message="tns:MSS_StatusQueryOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="MSS_ReceiptType">
    <wsdl:operation name="MSS_Receipt">
      <wsdl:input message="tns:MSS_ReceiptInput"/>
      <wsdl:output message="tns:MSS_ReceiptOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="MSS_SignaturePortSoapBinding" type="tns:MSS_SignaturePortType">
    <wsoap12:binding style="rpc" transport="http://www.w3.org/2003/05/soap/bindings/HTTP/"/>
    <wsdl:operation name="MSS_Signature">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_SignatureReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_SignatureResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MSS_StatusQueryPortSoapBinding" type="tns:MSS_StatusQueryType">
    <wsoap12:binding style="rpc" transport="http://www.w3.org/2003/05/soap/bindings/HTTP/"/>
    <wsdl:operation name="MSS_StatusQuery">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_StatusReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_StatusResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MSS_ReceiptPortSoapBinding" type="tns:MSS_ReceiptType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="MSS_Receipt">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_ReceiptReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_ReceiptResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="MSS_SignatureService">
    <wsdl:port name="MSS_SignaturePort" binding="tns:MSS_SignaturePortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="MSS_StatusService">
    <wsdl:port name="MSS_StatusQueryPort" binding="tns:MSS_StatusQueryPortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="MSS_ReceiptService">
    <wsdl:port name="MSS_ReceiptPort" binding="tns:MSS_ReceiptPortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_StatusQueryPort</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="MSS_StatusQuery" bindingOperationName="MSS_StatusQuery" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="StatusQuery"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_StatusQueryPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">
   <soapenv:Body>
      <MSS_StatusQuery>
         <mss:MSS_StatusReq MSSP_TransID="h8kq12" MinorVersion="1" MajorVersion="1" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
         </mss:MSS_StatusReq>
      </MSS_StatusQuery>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_StatusQueryType/MSS_StatusQueryRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="MSS_Signature" type="wsdl" bindingName="{http://nevis.ch/esauth/wsdl/mss.wsdl}MSS_SignaturePortSoapBinding" soapVersion="1_2" anonymous="optional" definition="file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl"><con:part><con:url>file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="MSS" targetNamespace="http://nevis.ch/esauth/wsdl/mss.wsdl" xmlns:tns="http://nevis.ch/esauth/wsdl/mss.wsdl" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:wsoap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <wsdl:types>
    <xs:schema targetNamespace="http://www.w3.org/2001/04/xmlenc#" version="1.0" elementFormDefault="qualified">
      <xs:complexType name="EncryptedType" abstract="true">
        <xs:sequence>
          <xs:element name="EncryptionMethod" type="xenc:EncryptionMethodType" minOccurs="0"/>
          <xs:element ref="ds:KeyInfo" minOccurs="0"/>
          <xs:element ref="xenc:CipherData"/>
          <xs:element ref="xenc:EncryptionProperties" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <xs:attribute name="Encoding" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:complexType name="EncryptionMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="KeySize" minOccurs="0" type="xenc:KeySizeType"/>
          <xs:element name="OAEPparams" minOccurs="0" type="xs:base64Binary"/>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:simpleType name="KeySizeType">
        <xs:restriction base="xs:integer"/>
      </xs:simpleType>
      <xs:element name="CipherData" type="xenc:CipherDataType"/>
      <xs:complexType name="CipherDataType">
        <xs:choice>
          <xs:element name="CipherValue" type="xs:base64Binary"/>
          <xs:element ref="xenc:CipherReference"/>
        </xs:choice>
      </xs:complexType>
      <xs:element name="CipherReference" type="xenc:CipherReferenceType"/>
      <xs:complexType name="CipherReferenceType">
        <xs:choice>
          <xs:element name="Transforms" type="xenc:TransformsType" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="URI" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:complexType name="TransformsType">
        <xs:sequence>
          <xs:element ref="ds:Transform" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="EncryptedData" type="xenc:EncryptedDataType"/>
      <xs:complexType name="EncryptedDataType">
        <xs:complexContent>
          <xs:extension base="xenc:EncryptedType"></xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <!--Children of ds:KeyInfo-->
      <xs:element name="EncryptedKey" type="xenc:EncryptedKeyType"/>
      <xs:complexType name="EncryptedKeyType">
        <xs:complexContent>
          <xs:extension base="xenc:EncryptedType">
            <xs:sequence>
              <xs:element ref="xenc:ReferenceList" minOccurs="0"/>
              <xs:element name="CarriedKeyName" type="xs:string" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="Recipient" type="xs:string" use="optional"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="AgreementMethod" type="xenc:AgreementMethodType"/>
      <xs:complexType name="AgreementMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="KA-Nonce" minOccurs="0" type="xs:base64Binary"/>
          <!--<xs:element ref="ds:DigestMethod" minOccurs="0"/>-->
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="OriginatorKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
          <xs:element name="RecipientKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--End Children of ds:KeyInfo-->
      <xs:element name="ReferenceList">
        <xs:complexType>
          <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="DataReference" type="xenc:ReferenceType"/>
            <xs:element name="KeyReference" type="xenc:ReferenceType"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ReferenceType">
        <xs:sequence>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="URI" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="EncryptionProperties" type="xenc:EncryptionPropertiesType"/>
      <xs:complexType name="EncryptionPropertiesType">
        <xs:sequence>
          <xs:element ref="xenc:EncryptionProperty" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="EncryptionProperty" type="xenc:EncryptionPropertyType"/>
      <xs:complexType name="EncryptionPropertyType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
        <xs:attribute name="Target" type="xs:anyURI" use="optional"/>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:anyAttribute namespace="http://www.w3.org/XML/1998/namespace"/>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/2000/09/xmldsig#" version="0.1" elementFormDefault="qualified">
      <!--Basic Types Defined for Signatures-->
      <xs:simpleType name="CryptoBinary">
        <xs:restriction base="xs:base64Binary"></xs:restriction>
      </xs:simpleType>
      <!--Start Signature-->
      <xs:element name="Signature" type="ds:SignatureType"/>
      <xs:complexType name="SignatureType">
        <xs:sequence>
          <xs:element ref="ds:SignedInfo"/>
          <xs:element ref="ds:SignatureValue"/>
          <xs:element ref="ds:KeyInfo" minOccurs="0"/>
          <xs:element ref="ds:Object" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureValue" type="ds:SignatureValueType"/>
      <xs:complexType name="SignatureValueType">
        <xs:simpleContent>
          <xs:extension base="xs:base64Binary">
            <xs:attribute name="Id" type="xs:ID" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <!--Start SignedInfo-->
      <xs:element name="SignedInfo" type="ds:SignedInfoType"/>
      <xs:complexType name="SignedInfoType">
        <xs:sequence>
          <xs:element ref="ds:CanonicalizationMethod"/>
          <xs:element ref="ds:SignatureMethod"/>
          <xs:element ref="ds:Reference" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="CanonicalizationMethod" type="ds:CanonicalizationMethodType"/>
      <xs:complexType name="CanonicalizationMethodType" mixed="true">
        <xs:sequence>
          <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded"/>
          <!--(0,unbounded) elements from (1,1) namespace-->
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="SignatureMethod" type="ds:SignatureMethodType"/>
      <xs:complexType name="SignatureMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
          <!--(0,unbounded) elements from (1,1) external namespace-->
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--Start Reference-->
      <xs:element name="Reference" type="ds:ReferenceType"/>
      <xs:complexType name="ReferenceType">
        <xs:sequence>
          <xs:element ref="ds:Transforms" minOccurs="0"/>
          <xs:element ref="ds:DigestMethod"/>
          <xs:element ref="ds:DigestValue"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="URI" type="xs:anyURI" use="optional"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:element name="Transforms" type="ds:TransformsType"/>
      <xs:complexType name="TransformsType">
        <xs:sequence>
          <xs:element ref="ds:Transform" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="Transform" type="ds:TransformType"/>
      <xs:complexType name="TransformType" mixed="true">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
          <!--(1,1) elements from (0,unbounded) namespaces-->
          <xs:element name="XPath" type="xs:string"/>
        </xs:choice>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--End Reference-->
      <xs:element name="DigestMethod" type="ds:DigestMethodType"/>
      <xs:complexType name="DigestMethodType" mixed="true">
        <xs:sequence>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="DigestValue" type="ds:DigestValueType"/>
      <xs:simpleType name="DigestValueType">
        <xs:restriction base="xs:base64Binary"/>
      </xs:simpleType>
      <!--End SignedInfo-->
      <!--Start KeyInfo-->
      <xs:element name="KeyInfo" type="ds:KeyInfoType"/>
      <xs:complexType name="KeyInfoType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="ds:KeyName"/>
          <xs:element ref="ds:KeyValue"/>
          <xs:element ref="ds:RetrievalMethod"/>
          <xs:element ref="ds:X509Data"/>
          <xs:element ref="ds:PGPData"/>
          <xs:element ref="ds:SPKIData"/>
          <xs:element ref="ds:MgmtData"/>
          <xs:any processContents="lax" namespace="##other"/>
          <!--(1,1) elements from (0,unbounded) namespaces-->
        </xs:choice>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="KeyName" type="xs:string"/>
      <xs:element name="MgmtData" type="xs:string"/>
      <xs:element name="KeyValue" type="ds:KeyValueType"/>
      <xs:complexType name="KeyValueType" mixed="true">
        <xs:choice>
          <xs:element ref="ds:DSAKeyValue"/>
          <xs:element ref="ds:RSAKeyValue"/>
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
      </xs:complexType>
      <xs:element name="RetrievalMethod" type="ds:RetrievalMethodType"/>
      <xs:complexType name="RetrievalMethodType">
        <xs:sequence>
          <xs:element ref="ds:Transforms" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="URI" type="xs:anyURI"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <!--Start X509Data-->
      <xs:element name="X509Data" type="ds:X509DataType"/>
      <xs:complexType name="X509DataType">
        <xs:sequence maxOccurs="unbounded">
          <xs:choice>
            <xs:element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/>
            <xs:element name="X509SKI" type="xs:base64Binary"/>
            <xs:element name="X509SubjectName" type="xs:string"/>
            <xs:element name="X509Certificate" type="xs:base64Binary"/>
            <xs:element name="X509CRL" type="xs:base64Binary"/>
            <xs:any namespace="##other" processContents="lax"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="X509IssuerSerialType">
        <xs:sequence>
          <xs:element name="X509IssuerName" type="xs:string"/>
          <xs:element name="X509SerialNumber" type="xs:integer"/>
        </xs:sequence>
      </xs:complexType>
      <!--End X509Data-->
      <!--Begin PGPData-->
      <xs:element name="PGPData" type="ds:PGPDataType"/>
      <xs:complexType name="PGPDataType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="PGPKeyID" type="xs:base64Binary"/>
            <xs:element name="PGPKeyPacket" type="xs:base64Binary" minOccurs="0"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="PGPKeyPacket" type="xs:base64Binary"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:choice>
      </xs:complexType>
      <!--End PGPData-->
      <!--Begin SPKIData-->
      <xs:element name="SPKIData" type="ds:SPKIDataType"/>
      <xs:complexType name="SPKIDataType">
        <xs:sequence maxOccurs="unbounded">
          <xs:element name="SPKISexp" type="xs:base64Binary"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <!--End SPKIData-->
      <!--End KeyInfo-->
      <!--Start Object (Manifest, SignatureProperty)-->
      <xs:element name="Object" type="ds:ObjectType"/>
      <xs:complexType name="ObjectType" mixed="true">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##any" processContents="lax"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <!--add a grep facet-->
        <xs:attribute name="Encoding" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:element name="Manifest" type="ds:ManifestType"/>
      <xs:complexType name="ManifestType">
        <xs:sequence>
          <xs:element ref="ds:Reference" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureProperties" type="ds:SignaturePropertiesType"/>
      <xs:complexType name="SignaturePropertiesType">
        <xs:sequence>
          <xs:element ref="ds:SignatureProperty" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureProperty" type="ds:SignaturePropertyType"/>
      <xs:complexType name="SignaturePropertyType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
          <!--(1,1) elements from (1,unbounded) namespaces-->
        </xs:choice>
        <xs:attribute name="Target" type="xs:anyURI" use="required"/>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <!--End Object (Manifest, SignatureProperty)-->
      <!--Start Algorithm Parameters-->
      <xs:simpleType name="HMACOutputLengthType">
        <xs:restriction base="xs:integer"/>
      </xs:simpleType>
      <!--Start KeyValue Element-types-->
      <xs:element name="DSAKeyValue" type="ds:DSAKeyValueType"/>
      <xs:complexType name="DSAKeyValueType">
        <xs:sequence>
          <xs:sequence minOccurs="0">
            <xs:element name="P" type="ds:CryptoBinary"/>
            <xs:element name="Q" type="ds:CryptoBinary"/>
          </xs:sequence>
          <xs:element name="G" type="ds:CryptoBinary" minOccurs="0"/>
          <xs:element name="Y" type="ds:CryptoBinary"/>
          <xs:element name="J" type="ds:CryptoBinary" minOccurs="0"/>
          <xs:sequence minOccurs="0">
            <xs:element name="Seed" type="ds:CryptoBinary"/>
            <xs:element name="PgenCounter" type="ds:CryptoBinary"/>
          </xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="RSAKeyValue" type="ds:RSAKeyValueType"/>
      <xs:complexType name="RSAKeyValueType">
        <xs:sequence>
          <xs:element name="Modulus" type="ds:CryptoBinary"/>
          <xs:element name="Exponent" type="ds:CryptoBinary"/>
        </xs:sequence>
      </xs:complexType>
      <!--End KeyValue Element-types-->
      <!--End Signature-->
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/2003/05/soap-envelope" elementFormDefault="qualified">
      <!--Envelope, header and body-->
      <xs:element name="Envelope" type="soapenv:Envelope"/>
      <xs:complexType name="Envelope">
        <xs:sequence>
          <xs:element ref="soapenv:Header" minOccurs="0"/>
          <xs:element ref="soapenv:Body" minOccurs="1"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="Header" type="soapenv:Header"/>
      <xs:complexType name="Header">
        <xs:annotation>
          <xs:documentation>Elements replacing the wildcard MUST be namespace qualified, but can be in the targetNamespace</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="Body" type="soapenv:Body"/>
      <xs:complexType name="Body">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <!--Global Attributes.  The following attributes are intended to be
	  usable via qualified attribute names on any complex type referencing
	  them.-->
      <xs:attribute name="mustUnderstand" type="xs:boolean" default="0"/>
      <xs:attribute name="relay" type="xs:boolean" default="0"/>
      <xs:attribute name="role" type="xs:anyURI"/>
      <!--'encodingStyle' indicates any canonicalization conventions
	  followed in the contents of the containing element.  For example, the
	  value 'http://www.w3.org/2003/05/soap-encoding' indicates the pattern
	  described in the SOAP Version 1.2 Part 2: Adjuncts Recommendation-->
      <xs:attribute name="encodingStyle" type="xs:anyURI"/>
      <xs:element name="Fault" type="soapenv:Fault"/>
      <xs:complexType name="Fault" final="extension">
        <xs:annotation>
          <xs:documentation>Fault reporting structure</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="Code" type="soapenv:faultcode"/>
          <xs:element name="Reason" type="soapenv:faultreason"/>
          <xs:element name="Node" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="Role" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="Detail" type="soapenv:detail" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="faultreason">
        <xs:sequence>
          <xs:element name="Text" type="soapenv:reasontext" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="reasontext">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="xml:lang" use="required"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="faultcode">
        <xs:sequence>
          <xs:element name="Value" type="soapenv:faultcodeEnum"/>
          <xs:element name="Subcode" type="soapenv:subcode" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="faultcodeEnum">
        <xs:restriction base="xs:QName">
          <xs:enumeration value="soapenv:DataEncodingUnknown"/>
          <xs:enumeration value="soapenv:MustUnderstand"/>
          <xs:enumeration value="soapenv:Receiver"/>
          <xs:enumeration value="soapenv:Sender"/>
          <xs:enumeration value="soapenv:VersionMismatch"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="subcode">
        <xs:sequence>
          <xs:element name="Value" type="xs:QName"/>
          <xs:element name="Subcode" type="soapenv:subcode" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="detail">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <!--Global element declaration and complex type definition for header entry returned due to a mustUnderstand fault-->
      <xs:element name="NotUnderstood" type="soapenv:NotUnderstoodType"/>
      <xs:complexType name="NotUnderstoodType">
        <xs:attribute name="qname" type="xs:QName" use="required"/>
      </xs:complexType>
      <!--Global element and associated types for managing version transition as described in Appendix A of the SOAP Version 1.2 Part 1 Recommendation-->
      <xs:complexType name="SupportedEnvType">
        <xs:attribute name="qname" type="xs:QName" use="required"/>
      </xs:complexType>
      <xs:element name="Upgrade" type="soapenv:UpgradeType"/>
      <xs:complexType name="UpgradeType">
        <xs:sequence>
          <xs:element name="SupportedEnvelope" type="soapenv:SupportedEnvType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://uri.etsi.org/TS102204/v1.1.2#" elementFormDefault="qualified">
      <xs:complexType name="MessageAbstractType" abstract="true">
        <xs:sequence>
          <xs:element name="AP_Info">
            <xs:complexType>
              <xs:attribute name="AP_ID" type="xs:anyURI" use="required"/>
              <xs:attribute name="AP_TransID" type="xs:NCName" use="required"/>
              <xs:attribute name="AP_PWD" type="xs:string" use="required"/>
              <xs:attribute name="Instant" type="xs:dateTime" use="required"/>
              <xs:attribute name="AP_URL" type="xs:anyURI" use="optional"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="MSSP_Info">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="MSSP_ID" type="mss:MeshMemberType"/>
              </xs:sequence>
              <xs:attribute name="Instant" type="xs:dateTime" use="optional"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="MajorVersion" type="xs:integer" use="required"/>
        <xs:attribute name="MinorVersion" type="xs:integer" use="required"/>
      </xs:complexType>
      <xs:element name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"/>
      <xs:complexType name="MSS_SignatureReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="DataToBeSigned" type="mss:DataType"/>
              <xs:element name="DataToBeDisplayed" type="mss:DataType" minOccurs="0"/>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="AdditionalServices" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Service" type="mss:AdditionalServiceType" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MSS_Format" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="KeyReference" type="mss:KeyReferenceType" minOccurs="0"/>
              <xs:element name="SignatureProfileComparison" type="mss:SignatureProfileComparisonType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="ValidityDate" type="xs:dateTime" use="optional"/>
            <xs:attribute name="TimeOut" type="xs:positiveInteger" use="optional"/>
            <xs:attribute name="MessagingMode" type="mss:MessagingModeType" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"/>
      <xs:complexType name="MSS_SignatureRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
      <xs:complexType name="MSS_StatusReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
      <xs:complexType name="MSS_StatusRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_RegistrationReq" type="mss:MSS_RegistrationReqType"/>
      <xs:complexType name="MSS_RegistrationReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
              <xs:element name="EncryptResponseBy" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
              <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_RegistrationResp" type="mss:MSS_RegistrationRespType"/>
      <xs:complexType name="MSS_RegistrationRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="Status" type="mss:StatusType"/>
              <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
              <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
              <xs:element name="PublicKey" type="xs:base64Binary" minOccurs="0"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ProfileReq" type="mss:MSS_ProfileReqType"/>
      <xs:complexType name="MSS_ProfileReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ProfileResp" type="mss:MSS_ProfileRespType"/>
      <xs:complexType name="MSS_ProfileRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
      <xs:complexType name="MSS_ReceiptReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="Status" type="mss:StatusType" minOccurs="0"/>
              <xs:element name="Message" type="mss:DataType" minOccurs="0"/>
              <xs:element name="SignedReceipt" type="ds:SignatureType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
      <xs:complexType name="MSS_ReceiptRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_HandshakeReq" type="mss:MSS_HandshakeReqType"/>
      <xs:complexType name="MSS_HandshakeReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SecureMethods">
                <xs:complexType>
                  <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="Certificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="RootCAs">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="DN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="SignatureAlgList">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_HandshakeResp" type="mss:MSS_HandshakeRespType"/>
      <xs:complexType name="MSS_HandshakeRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SecureMethods">
                <xs:complexType>
                  <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingMSSPCertificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingAPCertificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingSigAlgList">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="MobileUserType">
        <xs:sequence>
          <xs:element name="IdentityIssuer" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:element name="UserIdentifier" type="xs:string" minOccurs="0"/>
          <xs:element name="HomeMSSP" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:element name="MSISDN" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DataType">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute name="MimeType" type="xs:string" use="optional"/>
            <xs:attribute name="Encoding" type="xs:string" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="SignatureProfileComparisonType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="exact"/>
          <xs:enumeration value="minimum"/>
          <xs:enumeration value="better"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MessagingModeType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="synch"/>
          <xs:enumeration value="asynchClientServer"/>
          <xs:enumeration value="asynchServerServer"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="DigestAlgAndValueType">
        <xs:sequence>
          <xs:element name="DigestMethod" type="ds:DigestMethodType" minOccurs="0"/>
          <xs:element name="DigestValue" type="ds:DigestValueType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="mssURIType">
        <xs:sequence>
          <xs:element name="mssURI" type="xs:anyURI"/>
          <xs:element name="DigestAlgAndValue" type="mss:DigestAlgAndValueType" minOccurs="0"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MeshMemberType">
        <xs:sequence>
          <xs:element name="DNSName" type="xs:string" minOccurs="0"/>
          <xs:element name="IPAddress" type="xs:string" minOccurs="0"/>
          <xs:element name="URI" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="IdentifierString" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="KeyReferenceType">
        <xs:sequence>
          <xs:element name="CertificateURL" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="CertificateIssuerDN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HashOfUsersPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HashOfCAPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:any namespace="##other" processContents="lax"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SignatureType">
        <xs:choice>
          <xs:element name="XMLSignature" type="ds:SignatureType"/>
          <xs:element name="Base64Signature" type="xs:base64Binary"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0"/>
          <!--this can also be an advanced XML Signature-->
        </xs:choice>
      </xs:complexType>
      <xs:element name="MSS_MessageSignature">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="ds:Signature"/>
          </xs:sequence>
          <xs:attribute ref="soapenv:role" use="required"/>
          <xs:attribute ref="soapenv:mustUnderstand" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AdditionalServiceType">
        <xs:sequence>
          <xs:element name="Description" type="mss:mssURIType"/>
          <xs:element name="Entity" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="mss:StatusCodeType"/>
          <xs:element name="StatusMessage" type="xs:string" minOccurs="0"/>
          <xs:element name="StatusDetail" type="mss:StatusDetailType" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="StatusCodeType">
        <xs:sequence>
          <xs:element name="StatusCode" type="mss:StatusCodeType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Value" type="xs:integer" use="required"/>
      </xs:complexType>
      <xs:complexType name="StatusDetailType">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" xml:lang="en">
      <xs:annotation>
        <xs:documentation>
          <div>
            <h1>About the XML namespace</h1>
            <div class="bodytext">
              <p>This schema document describes the XML namespace, in a form
		      suitable for import by other schema documents.</p>
              <p>
                See
                <a href="http://www.w3.org/XML/1998/namespace.html">http://www.w3.org/XML/1998/namespace.html</a>
                and
                <a href="http://www.w3.org/TR/REC-xml">http://www.w3.org/TR/REC-xml</a>
                for information 
		      about this namespace.
              </p>
              <p>Note that local names in this namespace are intended to be
		      defined only by the World Wide Web Consortium or its subgroups.
		      The names currently defined in this namespace are listed below.
		      They should not be used with conflicting semantics by any Working
		      Group, specification, or document instance.</p>
              <p>
                See further below in this document for more information about
                <a href="#usage">how to refer to this schema document from your own
		      XSD schema documents</a>
                and about
                <a href="#nsversioning">the
		      namespace-versioning policy governing this schema document</a>
                .
              </p>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>lang (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       is a language code for the natural language of the content of
		       any element; its value is inherited.  This name is reserved
		       by virtue of its definition in the XML specification.</p>
            </div>
            <div>
              <h4>Notes</h4>
              <p>Attempting to install the relevant ISO 2- and 3-letter
		      codes as the enumerated possible values is probably never
		      going to be a realistic possibility.</p>
              <p>
                See BCP 47 at
                <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
                and the IANA language subtag registry at
                <a href="http://www.iana.org/assignments/language-subtag-registry">http://www.iana.org/assignments/language-subtag-registry</a>
                for further information.
              </p>
              <p>The union allows for the 'un-declaration' of xml:lang with
		      the empty string.</p>
            </div>
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:union memberTypes="xs:language">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value=""/>
              </xs:restriction>
            </xs:simpleType>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="space">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>space (as an attribute name)</h3>
              <p>denotes an attribute whose
		       value is a keyword indicating what whitespace processing
		       discipline is intended for the content of the element; its
		       value is inherited.  This name is reserved by virtue of its
		       definition in the XML specification.</p>
            </div>
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:NCName">
            <xs:enumeration value="default"/>
            <xs:enumeration value="preserve"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="base" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>base (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       provides a URI to be used as the base for interpreting any
		       relative URIs in the scope of the element on which it
		       appears; its value is inherited.  This name is reserved
		       by virtue of its definition in the XML Base specification.</p>
              <p>
                See
                <a href="http://www.w3.org/TR/xmlbase/">http://www.w3.org/TR/xmlbase/</a>
                for information about this attribute.
              </p>
            </div>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>id (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       should be interpreted as if declared to be of type ID.
		       This name is reserved by virtue of its definition in the
		       xml:id specification.</p>
              <p>
                See
                <a href="http://www.w3.org/TR/xml-id/">http://www.w3.org/TR/xml-id/</a>
                for information about this attribute.
              </p>
            </div>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup name="specialAttrs">
        <xs:attribute ref="xml:base"/>
        <xs:attribute ref="xml:lang"/>
        <xs:attribute ref="xml:space"/>
        <xs:attribute ref="xml:id"/>
      </xs:attributeGroup>
      <xs:annotation>
        <xs:documentation>
          <div>
            <h3>Father (in any context at all)</h3>
            <div class="bodytext">
              <p>denotes Jon Bosak, the chair of 
		      the original XML Working Group.  This name is reserved by 
		      the following decision of the W3C XML Plenary and 
		      XML Coordination groups:</p>
              <blockquote>
                <p>In appreciation for his vision, leadership and
			dedication the W3C XML Plenary on this 10th day of
			February, 2000, reserves for Jon Bosak in perpetuity
			the XML name "xml:Father".</p>
              </blockquote>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:annotation>
        <xs:documentation>
          <div xml:id="usage" id="usage">
            <h2>
              <a name="usage">About this schema document</a>
            </h2>
            <div class="bodytext">
              <p>
                This schema defines attributes and an attribute group suitable
		      for use by schemas wishing to allow
                <code>xml:base</code>
                ,
                <code>xml:lang</code>
                ,
                <code>xml:space</code>
                or
                <code>xml:id</code>
                attributes on elements they define.
              </p>
              <p>To enable this, such a schema must import this schema for
		      the XML namespace, e.g. as follows:</p>
              <pre>&lt;schema . . .>
		           . . .
		           &lt;import namespace="http://www.w3.org/XML/1998/namespace"
		                      schemaLocation="http://www.w3.org/2001/xml.xsd"/></pre>
              <p>or</p>
              <pre>&lt;import namespace="http://www.w3.org/XML/1998/namespace"
		                      schemaLocation="http://www.w3.org/2009/01/xml.xsd"/></pre>
              <p>Subsequently, qualified reference to any of the attributes or the
		      group defined below will have the desired effect, e.g.</p>
              <pre>&lt;type . . .>
		           . . .
		           &lt;attributeGroup ref="xml:specialAttrs"/></pre>
              <p>will define a type which will schema-validate an instance element
		      with any of those attributes.</p>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:annotation>
        <xs:documentation>
          <div id="nsversioning" xml:id="nsversioning">
            <h2>
              <a name="nsversioning">Versioning policy for this schema document</a>
            </h2>
            <div class="bodytext">
              <p>
                In keeping with the XML Schema WG's standard versioning
		      policy, this schema document will persist at
                <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                .
              </p>
              <p>
                At the date of issue it can also be found at
                <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
                .
              </p>
              <p>
                The schema document at that URI may however change in the future,
		      in order to remain compatible with the latest version of XML
		      Schema itself, or with the XML namespace itself.  In other words,
		      if the XML Schema or XML namespaces change, the version of this
		      document at
                <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
                will change accordingly; the version at
                <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                will not change.
              </p>
              <p>Previous dated (and unchanging) versions of this schema 
		      document are at:</p>
              <ul>
                <li>
                  <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2007/08/xml.xsd">http://www.w3.org/2007/08/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2004/10/xml.xsd">http://www.w3.org/2004/10/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2001/03/xml.xsd">http://www.w3.org/2001/03/xml.xsd</a>
                </li>
              </ul>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
    </xs:schema>
    <xs:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" version="0.1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <!--// Fault Codes ///////////////////////////////////////////-->
      <xs:simpleType name="tTimestampFault">
        <xs:annotation>
          <xs:documentation>This type defines the fault code value for Timestamp message expiration.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:QName">
          <xs:enumeration value="wsu:MessageExpired"/>
        </xs:restriction>
      </xs:simpleType>
      <!--// Global attributes ////////////////////////////////////-->
      <xs:attribute name="Id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>This global attribute supports annotating arbitrary elements with an ID.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup name="commonAtts">
        <xs:annotation>
          <xs:documentation>Convenience attribute group used to simplify this schema.</xs:documentation>
        </xs:annotation>
        <xs:attribute ref="wsu:Id" use="optional"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:attributeGroup>
      <!--// Utility types ////////////////////////////////////////-->
      <xs:complexType name="AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This type is for elements whose [children] is a psuedo-dateTime and can have arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attributeGroup ref="wsu:commonAtts"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="AttributedURI">
        <xs:annotation>
          <xs:documentation>This type is for elements whose [children] is an anyURI and can have arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:anyURI">
            <xs:attributeGroup ref="wsu:commonAtts"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <!--// Timestamp header components ///////////////////////////-->
      <xs:complexType name="TimestampType">
        <xs:annotation>
          <xs:documentation>This complex type ties together the timestamp related elements into a composite type.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element ref="wsu:Created" minOccurs="0"/>
          <xs:element ref="wsu:Expires" minOccurs="0"/>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any namespace="##other" processContents="lax"/>
          </xs:choice>
        </xs:sequence>
        <xs:attributeGroup ref="wsu:commonAtts"/>
      </xs:complexType>
      <xs:element name="Timestamp" type="wsu:TimestampType">
        <xs:annotation>
          <xs:documentation>This element allows Timestamps to be applied anywhere element wildcards are present,
	including as a SOAP header.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <!--global element decls to allow individual elements to appear anywhere-->
      <xs:element name="Expires" type="wsu:AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This element allows an expiration time to be applied anywhere element wildcards are present.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Created" type="wsu:AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This element allows a creation time to be applied anywhere element wildcards are present.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:schema>
    <xs:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" blockDefault="#all" version="0.2" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
      <xs:complexType name="AttributedString">
        <xs:annotation>
          <xs:documentation>This type represents an element with arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="wsu:Id"/>
            <xs:anyAttribute namespace="##other" processContents="lax"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="PasswordString">
        <xs:annotation>
          <xs:documentation>This type is used for password elements per Section 4.1.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:AttributedString">
            <xs:attribute name="Type" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="EncodedString">
        <xs:annotation>
          <xs:documentation>This type is used for elements containing stringified binary data.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:AttributedString">
            <xs:attribute name="EncodingType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="UsernameTokenType">
        <xs:annotation>
          <xs:documentation>This type represents a username token per Section 4.1</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="Username" type="wsse:AttributedString"/>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute ref="wsu:Id"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="BinarySecurityTokenType">
        <xs:annotation>
          <xs:documentation>A security token that is encoded in binary</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:EncodedString">
            <xs:attribute name="ValueType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="KeyIdentifierType">
        <xs:annotation>
          <xs:documentation>A security token key identifier</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:EncodedString">
            <xs:attribute name="ValueType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="tUsage">
        <xs:annotation>
          <xs:documentation>Typedef to allow a list of usages (as URIs).</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:anyURI"/>
      </xs:simpleType>
      <xs:attribute name="Usage" type="wsse:tUsage">
        <xs:annotation>
          <xs:documentation>This global attribute is used to indicate the usage of a referenced or indicated token within the containing context</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:complexType name="ReferenceType">
        <xs:annotation>
          <xs:documentation>This type represents a reference to an external security token.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="URI" type="xs:anyURI"/>
        <xs:attribute name="ValueType" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="EmbeddedType">
        <xs:annotation>
          <xs:documentation>This type represents a reference to an embedded security token.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any processContents="lax"/>
        </xs:choice>
        <xs:attribute name="ValueType" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="SecurityTokenReferenceType">
        <xs:annotation>
          <xs:documentation>This type is used reference a security token.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any processContents="lax"/>
        </xs:choice>
        <xs:attribute ref="wsu:Id"/>
        <xs:attribute ref="wsse:Usage"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="SecurityHeaderType">
        <xs:annotation>
          <xs:documentation>This complexType defines header block to use for security-relevant data directed at a specific SOAP actor.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>The use of "any" is to allow extensibility and different forms of security data.</xs:documentation>
            </xs:annotation>
          </xs:any>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="TransformationParametersType">
        <xs:annotation>
          <xs:documentation>This complexType defines a container for elements to be specified from any namespace as properties/parameters of a DSIG transformation.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>The use of "any" is to allow extensibility from any namespace.</xs:documentation>
            </xs:annotation>
          </xs:any>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="UsernameToken" type="wsse:UsernameTokenType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:UsernameToken element per Section 4.1.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BinarySecurityToken" type="wsse:BinarySecurityTokenType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:BinarySecurityToken element per Section 4.2.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Reference" type="wsse:ReferenceType">
        <xs:annotation>
          <xs:documentation>This element defines a security token reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Embedded" type="wsse:EmbeddedType">
        <xs:annotation>
          <xs:documentation>This element defines a security token embedded reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="KeyIdentifier" type="wsse:KeyIdentifierType">
        <xs:annotation>
          <xs:documentation>This element defines a key identifier reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SecurityTokenReference" type="wsse:SecurityTokenReferenceType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:SecurityTokenReference per Section 4.3.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Security" type="wsse:SecurityHeaderType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:Security SOAP header element per Section 4.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="TransformationParameters" type="wsse:TransformationParametersType">
        <xs:annotation>
          <xs:documentation>This element contains properties for transformations from any namespace, including DSIG.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Password" type="wsse:PasswordString"/>
      <xs:element name="Nonce" type="wsse:EncodedString"/>
      <xs:simpleType name="FaultcodeEnum">
        <xs:restriction base="xs:QName">
          <xs:enumeration value="wsse:UnsupportedSecurityToken"/>
          <xs:enumeration value="wsse:UnsupportedAlgorithm"/>
          <xs:enumeration value="wsse:InvalidSecurity"/>
          <xs:enumeration value="wsse:InvalidSecurityToken"/>
          <xs:enumeration value="wsse:FailedAuthentication"/>
          <xs:enumeration value="wsse:FailedCheck"/>
          <xs:enumeration value="wsse:SecurityTokenUnavailable"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="MSS_SignatureOutput">
    <wsdl:part name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MSS_SignatureInput">
    <wsdl:part name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MSS_StatusQueryInput">
    <wsdl:part name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
  </wsdl:message>
  <wsdl:message name="MSS_StatusQueryOutput">
    <wsdl:part name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
  </wsdl:message>
  <wsdl:message name="MSS_ReceiptInput">
    <wsdl:part name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
  </wsdl:message>
  <wsdl:message name="MSS_ReceiptOutput">
    <wsdl:part name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
  </wsdl:message>
  <wsdl:message name="MSS_FaultMessage">
    <wsdl:part name="MSS_Fault" element="soapenv:Fault"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="MSS_SignaturePortType">
    <wsdl:operation name="MSS_Signature">
      <wsdl:input message="tns:MSS_SignatureInput"/>
      <wsdl:output message="tns:MSS_SignatureOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="MSS_StatusQueryType">
    <wsdl:operation name="MSS_StatusQuery">
      <wsdl:input message="tns:MSS_StatusQueryInput"/>
      <wsdl:output message="tns:MSS_StatusQueryOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="MSS_ReceiptType">
    <wsdl:operation name="MSS_Receipt">
      <wsdl:input message="tns:MSS_ReceiptInput"/>
      <wsdl:output message="tns:MSS_ReceiptOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="MSS_SignaturePortSoapBinding" type="tns:MSS_SignaturePortType">
    <wsoap12:binding style="rpc" transport="http://www.w3.org/2003/05/soap/bindings/HTTP/"/>
    <wsdl:operation name="MSS_Signature">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_SignatureReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_SignatureResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MSS_StatusQueryPortSoapBinding" type="tns:MSS_StatusQueryType">
    <wsoap12:binding style="rpc" transport="http://www.w3.org/2003/05/soap/bindings/HTTP/"/>
    <wsdl:operation name="MSS_StatusQuery">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_StatusReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_StatusResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MSS_ReceiptPortSoapBinding" type="tns:MSS_ReceiptType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="MSS_Receipt">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_ReceiptReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_ReceiptResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="MSS_SignatureService">
    <wsdl:port name="MSS_SignaturePort" binding="tns:MSS_SignaturePortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="MSS_StatusService">
    <wsdl:port name="MSS_StatusQueryPort" binding="tns:MSS_StatusQueryPortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="MSS_ReceiptService">
    <wsdl:port name="MSS_ReceiptPort" binding="tns:MSS_ReceiptPortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="MSS_Signature" bindingOperationName="MSS_Signature" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="HEARTBEAT 41000000000"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000000000</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>EN</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Signature [synch]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>4179123456</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Do you want to login?</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>EN</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Signature [asynch]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="asynchClientServer" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>4179123456</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Do you want to login?</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>EN</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="101: ILLEGAL_MSISDN"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092101</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="102: MISSING_PARAM"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092102</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="103: WRONG_DATA_LENGTH"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092103</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="104: UNAUTHORIZED_ACCESS"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092104</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="105: UNKNOWN_CLIENT"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092105</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="107: INAPPROPRIATE_DATA"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092107</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="108: INCOMPATIBLE_INTERFACE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092108</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="109: UNSUPPORTED_PROFILE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092109</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="208: EXPIRED_TRANSACTION"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092208</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="209: OTA_ERROR"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092209</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="401: USER_CANCEL"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092401</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="402: PIN_NR_BLOCKED"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092402</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="403: CARD_BLOCKED"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092403</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="404: NO_KEY_FOUND"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092404</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="406: PB_SIGNATURE_PROCESS"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092406</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="422: NO_CERT_FOUND"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092422</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="900: INTERNAL_ERROR"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_SignaturePort</con:endpoint><con:request><![CDATA[<soapenv:Envelope soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <MSS_Signature>
         <mss:MSS_SignatureReq MinorVersion="1" MajorVersion="1" MessagingMode="synch" TimeOut="80" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41000092900</mss:MSISDN>
            </mss:MobileUser>
            <mss:DataToBeSigned MimeType="text/plain" Encoding="UTF-8">Hello</mss:DataToBeSigned>
            <mss:SignatureProfile>
               <mss:mssURI>http://mid.swisscom.ch/MID/v1/AuthProfile1</mss:mssURI>
            </mss:SignatureProfile>
            <mss:AdditionalServices>
               <mss:Service>
                  <mss:Description>
                     <mss:mssURI>http://mss.ficom.fi/TS102204/v1.0.0#userLang</mss:mssURI>
                  </mss:Description>
                  <fi:UserLang>DE</fi:UserLang>
               </mss:Service>
            </mss:AdditionalServices>
            <mss:MSS_Format>
               <mss:mssURI>http://uri.etsi.org/TS102204/v1.1.2#PKCS7</mss:mssURI>
            </mss:MSS_Format>
         </mss:MSS_SignatureReq>
      </MSS_Signature>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_SignaturePortType/MSS_SignatureRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="MSS_Receipt" type="wsdl" bindingName="{http://nevis.ch/esauth/wsdl/mss.wsdl}MSS_ReceiptPortSoapBinding" soapVersion="1_2" anonymous="optional" definition="file:/C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\TEMP\WSDL\mobileid-mss-wsdl-v1.0.wsdl"><con:part><con:url>file:\C:\TEMP\WSDL\mobileid-mss-wsdl-v1.0.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="MSS" targetNamespace="http://nevis.ch/esauth/wsdl/mss.wsdl" xmlns:tns="http://nevis.ch/esauth/wsdl/mss.wsdl" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:wsoap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <wsdl:types>
    <xs:schema targetNamespace="http://www.w3.org/2001/04/xmlenc#" version="1.0" elementFormDefault="qualified">
      <xs:complexType name="EncryptedType" abstract="true">
        <xs:sequence>
          <xs:element name="EncryptionMethod" type="xenc:EncryptionMethodType" minOccurs="0"/>
          <xs:element ref="ds:KeyInfo" minOccurs="0"/>
          <xs:element ref="xenc:CipherData"/>
          <xs:element ref="xenc:EncryptionProperties" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <xs:attribute name="Encoding" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:complexType name="EncryptionMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="KeySize" minOccurs="0" type="xenc:KeySizeType"/>
          <xs:element name="OAEPparams" minOccurs="0" type="xs:base64Binary"/>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:simpleType name="KeySizeType">
        <xs:restriction base="xs:integer"/>
      </xs:simpleType>
      <xs:element name="CipherData" type="xenc:CipherDataType"/>
      <xs:complexType name="CipherDataType">
        <xs:choice>
          <xs:element name="CipherValue" type="xs:base64Binary"/>
          <xs:element ref="xenc:CipherReference"/>
        </xs:choice>
      </xs:complexType>
      <xs:element name="CipherReference" type="xenc:CipherReferenceType"/>
      <xs:complexType name="CipherReferenceType">
        <xs:choice>
          <xs:element name="Transforms" type="xenc:TransformsType" minOccurs="0"/>
        </xs:choice>
        <xs:attribute name="URI" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:complexType name="TransformsType">
        <xs:sequence>
          <xs:element ref="ds:Transform" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="EncryptedData" type="xenc:EncryptedDataType"/>
      <xs:complexType name="EncryptedDataType">
        <xs:complexContent>
          <xs:extension base="xenc:EncryptedType"></xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <!--Children of ds:KeyInfo-->
      <xs:element name="EncryptedKey" type="xenc:EncryptedKeyType"/>
      <xs:complexType name="EncryptedKeyType">
        <xs:complexContent>
          <xs:extension base="xenc:EncryptedType">
            <xs:sequence>
              <xs:element ref="xenc:ReferenceList" minOccurs="0"/>
              <xs:element name="CarriedKeyName" type="xs:string" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="Recipient" type="xs:string" use="optional"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="AgreementMethod" type="xenc:AgreementMethodType"/>
      <xs:complexType name="AgreementMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="KA-Nonce" minOccurs="0" type="xs:base64Binary"/>
          <!--<xs:element ref="ds:DigestMethod" minOccurs="0"/>-->
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="OriginatorKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
          <xs:element name="RecipientKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--End Children of ds:KeyInfo-->
      <xs:element name="ReferenceList">
        <xs:complexType>
          <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="DataReference" type="xenc:ReferenceType"/>
            <xs:element name="KeyReference" type="xenc:ReferenceType"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="ReferenceType">
        <xs:sequence>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="URI" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="EncryptionProperties" type="xenc:EncryptionPropertiesType"/>
      <xs:complexType name="EncryptionPropertiesType">
        <xs:sequence>
          <xs:element ref="xenc:EncryptionProperty" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="EncryptionProperty" type="xenc:EncryptionPropertyType"/>
      <xs:complexType name="EncryptionPropertyType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
        <xs:attribute name="Target" type="xs:anyURI" use="optional"/>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:anyAttribute namespace="http://www.w3.org/XML/1998/namespace"/>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/2000/09/xmldsig#" version="0.1" elementFormDefault="qualified">
      <!--Basic Types Defined for Signatures-->
      <xs:simpleType name="CryptoBinary">
        <xs:restriction base="xs:base64Binary"></xs:restriction>
      </xs:simpleType>
      <!--Start Signature-->
      <xs:element name="Signature" type="ds:SignatureType"/>
      <xs:complexType name="SignatureType">
        <xs:sequence>
          <xs:element ref="ds:SignedInfo"/>
          <xs:element ref="ds:SignatureValue"/>
          <xs:element ref="ds:KeyInfo" minOccurs="0"/>
          <xs:element ref="ds:Object" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureValue" type="ds:SignatureValueType"/>
      <xs:complexType name="SignatureValueType">
        <xs:simpleContent>
          <xs:extension base="xs:base64Binary">
            <xs:attribute name="Id" type="xs:ID" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <!--Start SignedInfo-->
      <xs:element name="SignedInfo" type="ds:SignedInfoType"/>
      <xs:complexType name="SignedInfoType">
        <xs:sequence>
          <xs:element ref="ds:CanonicalizationMethod"/>
          <xs:element ref="ds:SignatureMethod"/>
          <xs:element ref="ds:Reference" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="CanonicalizationMethod" type="ds:CanonicalizationMethodType"/>
      <xs:complexType name="CanonicalizationMethodType" mixed="true">
        <xs:sequence>
          <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded"/>
          <!--(0,unbounded) elements from (1,1) namespace-->
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="SignatureMethod" type="ds:SignatureMethodType"/>
      <xs:complexType name="SignatureMethodType" mixed="true">
        <xs:sequence>
          <xs:element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/>
          <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
          <!--(0,unbounded) elements from (1,1) external namespace-->
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--Start Reference-->
      <xs:element name="Reference" type="ds:ReferenceType"/>
      <xs:complexType name="ReferenceType">
        <xs:sequence>
          <xs:element ref="ds:Transforms" minOccurs="0"/>
          <xs:element ref="ds:DigestMethod"/>
          <xs:element ref="ds:DigestValue"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="URI" type="xs:anyURI" use="optional"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:element name="Transforms" type="ds:TransformsType"/>
      <xs:complexType name="TransformsType">
        <xs:sequence>
          <xs:element ref="ds:Transform" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="Transform" type="ds:TransformType"/>
      <xs:complexType name="TransformType" mixed="true">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
          <!--(1,1) elements from (0,unbounded) namespaces-->
          <xs:element name="XPath" type="xs:string"/>
        </xs:choice>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <!--End Reference-->
      <xs:element name="DigestMethod" type="ds:DigestMethodType"/>
      <xs:complexType name="DigestMethodType" mixed="true">
        <xs:sequence>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Algorithm" type="xs:anyURI" use="required"/>
      </xs:complexType>
      <xs:element name="DigestValue" type="ds:DigestValueType"/>
      <xs:simpleType name="DigestValueType">
        <xs:restriction base="xs:base64Binary"/>
      </xs:simpleType>
      <!--End SignedInfo-->
      <!--Start KeyInfo-->
      <xs:element name="KeyInfo" type="ds:KeyInfoType"/>
      <xs:complexType name="KeyInfoType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="ds:KeyName"/>
          <xs:element ref="ds:KeyValue"/>
          <xs:element ref="ds:RetrievalMethod"/>
          <xs:element ref="ds:X509Data"/>
          <xs:element ref="ds:PGPData"/>
          <xs:element ref="ds:SPKIData"/>
          <xs:element ref="ds:MgmtData"/>
          <xs:any processContents="lax" namespace="##other"/>
          <!--(1,1) elements from (0,unbounded) namespaces-->
        </xs:choice>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="KeyName" type="xs:string"/>
      <xs:element name="MgmtData" type="xs:string"/>
      <xs:element name="KeyValue" type="ds:KeyValueType"/>
      <xs:complexType name="KeyValueType" mixed="true">
        <xs:choice>
          <xs:element ref="ds:DSAKeyValue"/>
          <xs:element ref="ds:RSAKeyValue"/>
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
      </xs:complexType>
      <xs:element name="RetrievalMethod" type="ds:RetrievalMethodType"/>
      <xs:complexType name="RetrievalMethodType">
        <xs:sequence>
          <xs:element ref="ds:Transforms" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="URI" type="xs:anyURI"/>
        <xs:attribute name="Type" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <!--Start X509Data-->
      <xs:element name="X509Data" type="ds:X509DataType"/>
      <xs:complexType name="X509DataType">
        <xs:sequence maxOccurs="unbounded">
          <xs:choice>
            <xs:element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/>
            <xs:element name="X509SKI" type="xs:base64Binary"/>
            <xs:element name="X509SubjectName" type="xs:string"/>
            <xs:element name="X509Certificate" type="xs:base64Binary"/>
            <xs:element name="X509CRL" type="xs:base64Binary"/>
            <xs:any namespace="##other" processContents="lax"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="X509IssuerSerialType">
        <xs:sequence>
          <xs:element name="X509IssuerName" type="xs:string"/>
          <xs:element name="X509SerialNumber" type="xs:integer"/>
        </xs:sequence>
      </xs:complexType>
      <!--End X509Data-->
      <!--Begin PGPData-->
      <xs:element name="PGPData" type="ds:PGPDataType"/>
      <xs:complexType name="PGPDataType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="PGPKeyID" type="xs:base64Binary"/>
            <xs:element name="PGPKeyPacket" type="xs:base64Binary" minOccurs="0"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="PGPKeyPacket" type="xs:base64Binary"/>
            <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:choice>
      </xs:complexType>
      <!--End PGPData-->
      <!--Begin SPKIData-->
      <xs:element name="SPKIData" type="ds:SPKIDataType"/>
      <xs:complexType name="SPKIDataType">
        <xs:sequence maxOccurs="unbounded">
          <xs:element name="SPKISexp" type="xs:base64Binary"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <!--End SPKIData-->
      <!--End KeyInfo-->
      <!--Start Object (Manifest, SignatureProperty)-->
      <xs:element name="Object" type="ds:ObjectType"/>
      <xs:complexType name="ObjectType" mixed="true">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##any" processContents="lax"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <!--add a grep facet-->
        <xs:attribute name="Encoding" type="xs:anyURI" use="optional"/>
      </xs:complexType>
      <xs:element name="Manifest" type="ds:ManifestType"/>
      <xs:complexType name="ManifestType">
        <xs:sequence>
          <xs:element ref="ds:Reference" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureProperties" type="ds:SignaturePropertiesType"/>
      <xs:complexType name="SignaturePropertiesType">
        <xs:sequence>
          <xs:element ref="ds:SignatureProperty" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <xs:element name="SignatureProperty" type="ds:SignaturePropertyType"/>
      <xs:complexType name="SignaturePropertyType" mixed="true">
        <xs:choice maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
          <!--(1,1) elements from (1,unbounded) namespaces-->
        </xs:choice>
        <xs:attribute name="Target" type="xs:anyURI" use="required"/>
        <xs:attribute name="Id" type="xs:ID" use="optional"/>
      </xs:complexType>
      <!--End Object (Manifest, SignatureProperty)-->
      <!--Start Algorithm Parameters-->
      <xs:simpleType name="HMACOutputLengthType">
        <xs:restriction base="xs:integer"/>
      </xs:simpleType>
      <!--Start KeyValue Element-types-->
      <xs:element name="DSAKeyValue" type="ds:DSAKeyValueType"/>
      <xs:complexType name="DSAKeyValueType">
        <xs:sequence>
          <xs:sequence minOccurs="0">
            <xs:element name="P" type="ds:CryptoBinary"/>
            <xs:element name="Q" type="ds:CryptoBinary"/>
          </xs:sequence>
          <xs:element name="G" type="ds:CryptoBinary" minOccurs="0"/>
          <xs:element name="Y" type="ds:CryptoBinary"/>
          <xs:element name="J" type="ds:CryptoBinary" minOccurs="0"/>
          <xs:sequence minOccurs="0">
            <xs:element name="Seed" type="ds:CryptoBinary"/>
            <xs:element name="PgenCounter" type="ds:CryptoBinary"/>
          </xs:sequence>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="RSAKeyValue" type="ds:RSAKeyValueType"/>
      <xs:complexType name="RSAKeyValueType">
        <xs:sequence>
          <xs:element name="Modulus" type="ds:CryptoBinary"/>
          <xs:element name="Exponent" type="ds:CryptoBinary"/>
        </xs:sequence>
      </xs:complexType>
      <!--End KeyValue Element-types-->
      <!--End Signature-->
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/2003/05/soap-envelope" elementFormDefault="qualified">
      <!--Envelope, header and body-->
      <xs:element name="Envelope" type="soapenv:Envelope"/>
      <xs:complexType name="Envelope">
        <xs:sequence>
          <xs:element ref="soapenv:Header" minOccurs="0"/>
          <xs:element ref="soapenv:Body" minOccurs="1"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="Header" type="soapenv:Header"/>
      <xs:complexType name="Header">
        <xs:annotation>
          <xs:documentation>Elements replacing the wildcard MUST be namespace qualified, but can be in the targetNamespace</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="Body" type="soapenv:Body"/>
      <xs:complexType name="Body">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <!--Global Attributes.  The following attributes are intended to be
	  usable via qualified attribute names on any complex type referencing
	  them.-->
      <xs:attribute name="mustUnderstand" type="xs:boolean" default="0"/>
      <xs:attribute name="relay" type="xs:boolean" default="0"/>
      <xs:attribute name="role" type="xs:anyURI"/>
      <!--'encodingStyle' indicates any canonicalization conventions
	  followed in the contents of the containing element.  For example, the
	  value 'http://www.w3.org/2003/05/soap-encoding' indicates the pattern
	  described in the SOAP Version 1.2 Part 2: Adjuncts Recommendation-->
      <xs:attribute name="encodingStyle" type="xs:anyURI"/>
      <xs:element name="Fault" type="soapenv:Fault"/>
      <xs:complexType name="Fault" final="extension">
        <xs:annotation>
          <xs:documentation>Fault reporting structure</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="Code" type="soapenv:faultcode"/>
          <xs:element name="Reason" type="soapenv:faultreason"/>
          <xs:element name="Node" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="Role" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="Detail" type="soapenv:detail" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="faultreason">
        <xs:sequence>
          <xs:element name="Text" type="soapenv:reasontext" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="reasontext">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="xml:lang" use="required"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="faultcode">
        <xs:sequence>
          <xs:element name="Value" type="soapenv:faultcodeEnum"/>
          <xs:element name="Subcode" type="soapenv:subcode" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="faultcodeEnum">
        <xs:restriction base="xs:QName">
          <xs:enumeration value="soapenv:DataEncodingUnknown"/>
          <xs:enumeration value="soapenv:MustUnderstand"/>
          <xs:enumeration value="soapenv:Receiver"/>
          <xs:enumeration value="soapenv:Sender"/>
          <xs:enumeration value="soapenv:VersionMismatch"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="subcode">
        <xs:sequence>
          <xs:element name="Value" type="xs:QName"/>
          <xs:element name="Subcode" type="soapenv:subcode" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="detail">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <!--Global element declaration and complex type definition for header entry returned due to a mustUnderstand fault-->
      <xs:element name="NotUnderstood" type="soapenv:NotUnderstoodType"/>
      <xs:complexType name="NotUnderstoodType">
        <xs:attribute name="qname" type="xs:QName" use="required"/>
      </xs:complexType>
      <!--Global element and associated types for managing version transition as described in Appendix A of the SOAP Version 1.2 Part 1 Recommendation-->
      <xs:complexType name="SupportedEnvType">
        <xs:attribute name="qname" type="xs:QName" use="required"/>
      </xs:complexType>
      <xs:element name="Upgrade" type="soapenv:UpgradeType"/>
      <xs:complexType name="UpgradeType">
        <xs:sequence>
          <xs:element name="SupportedEnvelope" type="soapenv:SupportedEnvType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://uri.etsi.org/TS102204/v1.1.2#" elementFormDefault="qualified">
      <xs:complexType name="MessageAbstractType" abstract="true">
        <xs:sequence>
          <xs:element name="AP_Info">
            <xs:complexType>
              <xs:attribute name="AP_ID" type="xs:anyURI" use="required"/>
              <xs:attribute name="AP_TransID" type="xs:NCName" use="required"/>
              <xs:attribute name="AP_PWD" type="xs:string" use="required"/>
              <xs:attribute name="Instant" type="xs:dateTime" use="required"/>
              <xs:attribute name="AP_URL" type="xs:anyURI" use="optional"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="MSSP_Info">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="MSSP_ID" type="mss:MeshMemberType"/>
              </xs:sequence>
              <xs:attribute name="Instant" type="xs:dateTime" use="optional"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="MajorVersion" type="xs:integer" use="required"/>
        <xs:attribute name="MinorVersion" type="xs:integer" use="required"/>
      </xs:complexType>
      <xs:element name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"/>
      <xs:complexType name="MSS_SignatureReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="DataToBeSigned" type="mss:DataType"/>
              <xs:element name="DataToBeDisplayed" type="mss:DataType" minOccurs="0"/>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="AdditionalServices" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Service" type="mss:AdditionalServiceType" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MSS_Format" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="KeyReference" type="mss:KeyReferenceType" minOccurs="0"/>
              <xs:element name="SignatureProfileComparison" type="mss:SignatureProfileComparisonType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="ValidityDate" type="xs:dateTime" use="optional"/>
            <xs:attribute name="TimeOut" type="xs:positiveInteger" use="optional"/>
            <xs:attribute name="MessagingMode" type="mss:MessagingModeType" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"/>
      <xs:complexType name="MSS_SignatureRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
      <xs:complexType name="MSS_StatusReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
      <xs:complexType name="MSS_StatusRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_RegistrationReq" type="mss:MSS_RegistrationReqType"/>
      <xs:complexType name="MSS_RegistrationReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
              <xs:element name="EncryptResponseBy" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
              <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_RegistrationResp" type="mss:MSS_RegistrationRespType"/>
      <xs:complexType name="MSS_RegistrationRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="Status" type="mss:StatusType"/>
              <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
              <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
              <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
              <xs:element name="PublicKey" type="xs:base64Binary" minOccurs="0"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ProfileReq" type="mss:MSS_ProfileReqType"/>
      <xs:complexType name="MSS_ProfileReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ProfileResp" type="mss:MSS_ProfileRespType"/>
      <xs:complexType name="MSS_ProfileRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
      <xs:complexType name="MSS_ReceiptReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="MobileUser" type="mss:MobileUserType"/>
              <xs:element name="Status" type="mss:StatusType" minOccurs="0"/>
              <xs:element name="Message" type="mss:DataType" minOccurs="0"/>
              <xs:element name="SignedReceipt" type="ds:SignatureType" minOccurs="0"/>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
      <xs:complexType name="MSS_ReceiptRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="Status" type="mss:StatusType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_HandshakeReq" type="mss:MSS_HandshakeReqType"/>
      <xs:complexType name="MSS_HandshakeReqType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SecureMethods">
                <xs:complexType>
                  <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="Certificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="RootCAs">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="DN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="SignatureAlgList">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:element name="MSS_HandshakeResp" type="mss:MSS_HandshakeRespType"/>
      <xs:complexType name="MSS_HandshakeRespType">
        <xs:complexContent>
          <xs:extension base="mss:MessageAbstractType">
            <xs:sequence>
              <xs:element name="SecureMethods">
                <xs:complexType>
                  <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
                  <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingMSSPCertificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingAPCertificates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="MatchingSigAlgList">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="MobileUserType">
        <xs:sequence>
          <xs:element name="IdentityIssuer" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:element name="UserIdentifier" type="xs:string" minOccurs="0"/>
          <xs:element name="HomeMSSP" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:element name="MSISDN" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DataType">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute name="MimeType" type="xs:string" use="optional"/>
            <xs:attribute name="Encoding" type="xs:string" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="SignatureProfileComparisonType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="exact"/>
          <xs:enumeration value="minimum"/>
          <xs:enumeration value="better"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="MessagingModeType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="synch"/>
          <xs:enumeration value="asynchClientServer"/>
          <xs:enumeration value="asynchServerServer"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="DigestAlgAndValueType">
        <xs:sequence>
          <xs:element name="DigestMethod" type="ds:DigestMethodType" minOccurs="0"/>
          <xs:element name="DigestValue" type="ds:DigestValueType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="mssURIType">
        <xs:sequence>
          <xs:element name="mssURI" type="xs:anyURI"/>
          <xs:element name="DigestAlgAndValue" type="mss:DigestAlgAndValueType" minOccurs="0"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MeshMemberType">
        <xs:sequence>
          <xs:element name="DNSName" type="xs:string" minOccurs="0"/>
          <xs:element name="IPAddress" type="xs:string" minOccurs="0"/>
          <xs:element name="URI" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="IdentifierString" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="KeyReferenceType">
        <xs:sequence>
          <xs:element name="CertificateURL" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="CertificateIssuerDN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HashOfUsersPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HashOfCAPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:any namespace="##other" processContents="lax"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SignatureType">
        <xs:choice>
          <xs:element name="XMLSignature" type="ds:SignatureType"/>
          <xs:element name="Base64Signature" type="xs:base64Binary"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0"/>
          <!--this can also be an advanced XML Signature-->
        </xs:choice>
      </xs:complexType>
      <xs:element name="MSS_MessageSignature">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="ds:Signature"/>
          </xs:sequence>
          <xs:attribute ref="soapenv:role" use="required"/>
          <xs:attribute ref="soapenv:mustUnderstand" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="AdditionalServiceType">
        <xs:sequence>
          <xs:element name="Description" type="mss:mssURIType"/>
          <xs:element name="Entity" type="mss:MeshMemberType" minOccurs="0"/>
          <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="StatusType">
        <xs:sequence>
          <xs:element name="StatusCode" type="mss:StatusCodeType"/>
          <xs:element name="StatusMessage" type="xs:string" minOccurs="0"/>
          <xs:element name="StatusDetail" type="mss:StatusDetailType" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="StatusCodeType">
        <xs:sequence>
          <xs:element name="StatusCode" type="mss:StatusCodeType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Value" type="xs:integer" use="required"/>
      </xs:complexType>
      <xs:complexType name="StatusDetailType">
        <xs:sequence>
          <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" xml:lang="en">
      <xs:annotation>
        <xs:documentation>
          <div>
            <h1>About the XML namespace</h1>
            <div class="bodytext">
              <p>This schema document describes the XML namespace, in a form
		      suitable for import by other schema documents.</p>
              <p>
                See
                <a href="http://www.w3.org/XML/1998/namespace.html">http://www.w3.org/XML/1998/namespace.html</a>
                and
                <a href="http://www.w3.org/TR/REC-xml">http://www.w3.org/TR/REC-xml</a>
                for information 
		      about this namespace.
              </p>
              <p>Note that local names in this namespace are intended to be
		      defined only by the World Wide Web Consortium or its subgroups.
		      The names currently defined in this namespace are listed below.
		      They should not be used with conflicting semantics by any Working
		      Group, specification, or document instance.</p>
              <p>
                See further below in this document for more information about
                <a href="#usage">how to refer to this schema document from your own
		      XSD schema documents</a>
                and about
                <a href="#nsversioning">the
		      namespace-versioning policy governing this schema document</a>
                .
              </p>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>lang (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       is a language code for the natural language of the content of
		       any element; its value is inherited.  This name is reserved
		       by virtue of its definition in the XML specification.</p>
            </div>
            <div>
              <h4>Notes</h4>
              <p>Attempting to install the relevant ISO 2- and 3-letter
		      codes as the enumerated possible values is probably never
		      going to be a realistic possibility.</p>
              <p>
                See BCP 47 at
                <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
                and the IANA language subtag registry at
                <a href="http://www.iana.org/assignments/language-subtag-registry">http://www.iana.org/assignments/language-subtag-registry</a>
                for further information.
              </p>
              <p>The union allows for the 'un-declaration' of xml:lang with
		      the empty string.</p>
            </div>
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:union memberTypes="xs:language">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value=""/>
              </xs:restriction>
            </xs:simpleType>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="space">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>space (as an attribute name)</h3>
              <p>denotes an attribute whose
		       value is a keyword indicating what whitespace processing
		       discipline is intended for the content of the element; its
		       value is inherited.  This name is reserved by virtue of its
		       definition in the XML specification.</p>
            </div>
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:NCName">
            <xs:enumeration value="default"/>
            <xs:enumeration value="preserve"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="base" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>base (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       provides a URI to be used as the base for interpreting any
		       relative URIs in the scope of the element on which it
		       appears; its value is inherited.  This name is reserved
		       by virtue of its definition in the XML Base specification.</p>
              <p>
                See
                <a href="http://www.w3.org/TR/xmlbase/">http://www.w3.org/TR/xmlbase/</a>
                for information about this attribute.
              </p>
            </div>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>
            <div>
              <h3>id (as an attribute name)</h3>
              <p>denotes an attribute whose value
		       should be interpreted as if declared to be of type ID.
		       This name is reserved by virtue of its definition in the
		       xml:id specification.</p>
              <p>
                See
                <a href="http://www.w3.org/TR/xml-id/">http://www.w3.org/TR/xml-id/</a>
                for information about this attribute.
              </p>
            </div>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup name="specialAttrs">
        <xs:attribute ref="xml:base"/>
        <xs:attribute ref="xml:lang"/>
        <xs:attribute ref="xml:space"/>
        <xs:attribute ref="xml:id"/>
      </xs:attributeGroup>
      <xs:annotation>
        <xs:documentation>
          <div>
            <h3>Father (in any context at all)</h3>
            <div class="bodytext">
              <p>denotes Jon Bosak, the chair of 
		      the original XML Working Group.  This name is reserved by 
		      the following decision of the W3C XML Plenary and 
		      XML Coordination groups:</p>
              <blockquote>
                <p>In appreciation for his vision, leadership and
			dedication the W3C XML Plenary on this 10th day of
			February, 2000, reserves for Jon Bosak in perpetuity
			the XML name "xml:Father".</p>
              </blockquote>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:annotation>
        <xs:documentation>
          <div xml:id="usage" id="usage">
            <h2>
              <a name="usage">About this schema document</a>
            </h2>
            <div class="bodytext">
              <p>
                This schema defines attributes and an attribute group suitable
		      for use by schemas wishing to allow
                <code>xml:base</code>
                ,
                <code>xml:lang</code>
                ,
                <code>xml:space</code>
                or
                <code>xml:id</code>
                attributes on elements they define.
              </p>
              <p>To enable this, such a schema must import this schema for
		      the XML namespace, e.g. as follows:</p>
              <pre>&lt;schema . . .>
		           . . .
		           &lt;import namespace="http://www.w3.org/XML/1998/namespace"
		                      schemaLocation="http://www.w3.org/2001/xml.xsd"/></pre>
              <p>or</p>
              <pre>&lt;import namespace="http://www.w3.org/XML/1998/namespace"
		                      schemaLocation="http://www.w3.org/2009/01/xml.xsd"/></pre>
              <p>Subsequently, qualified reference to any of the attributes or the
		      group defined below will have the desired effect, e.g.</p>
              <pre>&lt;type . . .>
		           . . .
		           &lt;attributeGroup ref="xml:specialAttrs"/></pre>
              <p>will define a type which will schema-validate an instance element
		      with any of those attributes.</p>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
      <xs:annotation>
        <xs:documentation>
          <div id="nsversioning" xml:id="nsversioning">
            <h2>
              <a name="nsversioning">Versioning policy for this schema document</a>
            </h2>
            <div class="bodytext">
              <p>
                In keeping with the XML Schema WG's standard versioning
		      policy, this schema document will persist at
                <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                .
              </p>
              <p>
                At the date of issue it can also be found at
                <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
                .
              </p>
              <p>
                The schema document at that URI may however change in the future,
		      in order to remain compatible with the latest version of XML
		      Schema itself, or with the XML namespace itself.  In other words,
		      if the XML Schema or XML namespaces change, the version of this
		      document at
                <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
                will change accordingly; the version at
                <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                will not change.
              </p>
              <p>Previous dated (and unchanging) versions of this schema 
		      document are at:</p>
              <ul>
                <li>
                  <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2007/08/xml.xsd">http://www.w3.org/2007/08/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2004/10/xml.xsd">http://www.w3.org/2004/10/xml.xsd</a>
                </li>
                <li>
                  <a href="http://www.w3.org/2001/03/xml.xsd">http://www.w3.org/2001/03/xml.xsd</a>
                </li>
              </ul>
            </div>
          </div>
        </xs:documentation>
      </xs:annotation>
    </xs:schema>
    <xs:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" version="0.1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <!--// Fault Codes ///////////////////////////////////////////-->
      <xs:simpleType name="tTimestampFault">
        <xs:annotation>
          <xs:documentation>This type defines the fault code value for Timestamp message expiration.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:QName">
          <xs:enumeration value="wsu:MessageExpired"/>
        </xs:restriction>
      </xs:simpleType>
      <!--// Global attributes ////////////////////////////////////-->
      <xs:attribute name="Id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>This global attribute supports annotating arbitrary elements with an ID.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup name="commonAtts">
        <xs:annotation>
          <xs:documentation>Convenience attribute group used to simplify this schema.</xs:documentation>
        </xs:annotation>
        <xs:attribute ref="wsu:Id" use="optional"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:attributeGroup>
      <!--// Utility types ////////////////////////////////////////-->
      <xs:complexType name="AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This type is for elements whose [children] is a psuedo-dateTime and can have arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attributeGroup ref="wsu:commonAtts"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="AttributedURI">
        <xs:annotation>
          <xs:documentation>This type is for elements whose [children] is an anyURI and can have arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:anyURI">
            <xs:attributeGroup ref="wsu:commonAtts"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <!--// Timestamp header components ///////////////////////////-->
      <xs:complexType name="TimestampType">
        <xs:annotation>
          <xs:documentation>This complex type ties together the timestamp related elements into a composite type.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element ref="wsu:Created" minOccurs="0"/>
          <xs:element ref="wsu:Expires" minOccurs="0"/>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:any namespace="##other" processContents="lax"/>
          </xs:choice>
        </xs:sequence>
        <xs:attributeGroup ref="wsu:commonAtts"/>
      </xs:complexType>
      <xs:element name="Timestamp" type="wsu:TimestampType">
        <xs:annotation>
          <xs:documentation>This element allows Timestamps to be applied anywhere element wildcards are present,
	including as a SOAP header.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <!--global element decls to allow individual elements to appear anywhere-->
      <xs:element name="Expires" type="wsu:AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This element allows an expiration time to be applied anywhere element wildcards are present.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Created" type="wsu:AttributedDateTime">
        <xs:annotation>
          <xs:documentation>This element allows a creation time to be applied anywhere element wildcards are present.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:schema>
    <xs:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" blockDefault="#all" version="0.2" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
      <xs:complexType name="AttributedString">
        <xs:annotation>
          <xs:documentation>This type represents an element with arbitrary attributes.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="wsu:Id"/>
            <xs:anyAttribute namespace="##other" processContents="lax"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="PasswordString">
        <xs:annotation>
          <xs:documentation>This type is used for password elements per Section 4.1.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:AttributedString">
            <xs:attribute name="Type" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="EncodedString">
        <xs:annotation>
          <xs:documentation>This type is used for elements containing stringified binary data.</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:AttributedString">
            <xs:attribute name="EncodingType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="UsernameTokenType">
        <xs:annotation>
          <xs:documentation>This type represents a username token per Section 4.1</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="Username" type="wsse:AttributedString"/>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute ref="wsu:Id"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="BinarySecurityTokenType">
        <xs:annotation>
          <xs:documentation>A security token that is encoded in binary</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:EncodedString">
            <xs:attribute name="ValueType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:complexType name="KeyIdentifierType">
        <xs:annotation>
          <xs:documentation>A security token key identifier</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="wsse:EncodedString">
            <xs:attribute name="ValueType" type="xs:anyURI"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="tUsage">
        <xs:annotation>
          <xs:documentation>Typedef to allow a list of usages (as URIs).</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:anyURI"/>
      </xs:simpleType>
      <xs:attribute name="Usage" type="wsse:tUsage">
        <xs:annotation>
          <xs:documentation>This global attribute is used to indicate the usage of a referenced or indicated token within the containing context</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:complexType name="ReferenceType">
        <xs:annotation>
          <xs:documentation>This type represents a reference to an external security token.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="URI" type="xs:anyURI"/>
        <xs:attribute name="ValueType" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="EmbeddedType">
        <xs:annotation>
          <xs:documentation>This type represents a reference to an embedded security token.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any processContents="lax"/>
        </xs:choice>
        <xs:attribute name="ValueType" type="xs:anyURI"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="SecurityTokenReferenceType">
        <xs:annotation>
          <xs:documentation>This type is used reference a security token.</xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any processContents="lax"/>
        </xs:choice>
        <xs:attribute ref="wsu:Id"/>
        <xs:attribute ref="wsse:Usage"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="SecurityHeaderType">
        <xs:annotation>
          <xs:documentation>This complexType defines header block to use for security-relevant data directed at a specific SOAP actor.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>The use of "any" is to allow extensibility and different forms of security data.</xs:documentation>
            </xs:annotation>
          </xs:any>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:complexType name="TransformationParametersType">
        <xs:annotation>
          <xs:documentation>This complexType defines a container for elements to be specified from any namespace as properties/parameters of a DSIG transformation.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>The use of "any" is to allow extensibility from any namespace.</xs:documentation>
            </xs:annotation>
          </xs:any>
        </xs:sequence>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
      <xs:element name="UsernameToken" type="wsse:UsernameTokenType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:UsernameToken element per Section 4.1.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BinarySecurityToken" type="wsse:BinarySecurityTokenType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:BinarySecurityToken element per Section 4.2.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Reference" type="wsse:ReferenceType">
        <xs:annotation>
          <xs:documentation>This element defines a security token reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Embedded" type="wsse:EmbeddedType">
        <xs:annotation>
          <xs:documentation>This element defines a security token embedded reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="KeyIdentifier" type="wsse:KeyIdentifierType">
        <xs:annotation>
          <xs:documentation>This element defines a key identifier reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SecurityTokenReference" type="wsse:SecurityTokenReferenceType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:SecurityTokenReference per Section 4.3.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Security" type="wsse:SecurityHeaderType">
        <xs:annotation>
          <xs:documentation>This element defines the wsse:Security SOAP header element per Section 4.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="TransformationParameters" type="wsse:TransformationParametersType">
        <xs:annotation>
          <xs:documentation>This element contains properties for transformations from any namespace, including DSIG.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Password" type="wsse:PasswordString"/>
      <xs:element name="Nonce" type="wsse:EncodedString"/>
      <xs:simpleType name="FaultcodeEnum">
        <xs:restriction base="xs:QName">
          <xs:enumeration value="wsse:UnsupportedSecurityToken"/>
          <xs:enumeration value="wsse:UnsupportedAlgorithm"/>
          <xs:enumeration value="wsse:InvalidSecurity"/>
          <xs:enumeration value="wsse:InvalidSecurityToken"/>
          <xs:enumeration value="wsse:FailedAuthentication"/>
          <xs:enumeration value="wsse:FailedCheck"/>
          <xs:enumeration value="wsse:SecurityTokenUnavailable"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="MSS_SignatureOutput">
    <wsdl:part name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MSS_SignatureInput">
    <wsdl:part name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MSS_StatusQueryInput">
    <wsdl:part name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
  </wsdl:message>
  <wsdl:message name="MSS_StatusQueryOutput">
    <wsdl:part name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
  </wsdl:message>
  <wsdl:message name="MSS_ReceiptInput">
    <wsdl:part name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
  </wsdl:message>
  <wsdl:message name="MSS_ReceiptOutput">
    <wsdl:part name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
  </wsdl:message>
  <wsdl:message name="MSS_FaultMessage">
    <wsdl:part name="MSS_Fault" element="soapenv:Fault"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="MSS_SignaturePortType">
    <wsdl:operation name="MSS_Signature">
      <wsdl:input message="tns:MSS_SignatureInput"/>
      <wsdl:output message="tns:MSS_SignatureOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="MSS_StatusQueryType">
    <wsdl:operation name="MSS_StatusQuery">
      <wsdl:input message="tns:MSS_StatusQueryInput"/>
      <wsdl:output message="tns:MSS_StatusQueryOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="MSS_ReceiptType">
    <wsdl:operation name="MSS_Receipt">
      <wsdl:input message="tns:MSS_ReceiptInput"/>
      <wsdl:output message="tns:MSS_ReceiptOutput"/>
      <wsdl:fault message="tns:MSS_FaultMessage" name="FaultPart"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="MSS_SignaturePortSoapBinding" type="tns:MSS_SignaturePortType">
    <wsoap12:binding style="rpc" transport="http://www.w3.org/2003/05/soap/bindings/HTTP/"/>
    <wsdl:operation name="MSS_Signature">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_SignatureReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_SignatureResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MSS_StatusQueryPortSoapBinding" type="tns:MSS_StatusQueryType">
    <wsoap12:binding style="rpc" transport="http://www.w3.org/2003/05/soap/bindings/HTTP/"/>
    <wsdl:operation name="MSS_StatusQuery">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_StatusReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_StatusResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MSS_ReceiptPortSoapBinding" type="tns:MSS_ReceiptType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="MSS_Receipt">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <wsdl:input>
        <wsoap12:body parts="MSS_ReceiptReq" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <wsoap12:body parts="MSS_ReceiptResp" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="FaultPart">
        <wsoap12:fault parts="Fault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="MSS_SignatureService">
    <wsdl:port name="MSS_SignaturePort" binding="tns:MSS_SignaturePortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="MSS_StatusService">
    <wsdl:port name="MSS_StatusQueryPort" binding="tns:MSS_StatusQueryPortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="MSS_ReceiptService">
    <wsdl:port name="MSS_ReceiptPort" binding="tns:MSS_ReceiptPortSoapBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_ReceiptPort</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="MSS_Receipt" bindingOperationName="MSS_Receipt" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Receipt [plain]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_ReceiptPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">
   <soapenv:Body>
      <MSS_Receipt>
         <mss:MSS_ReceiptReq MSSP_TransID="h8kq7k" MinorVersion="1" MajorVersion="1" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>4179123456</mss:MSISDN>
            </mss:MobileUser>
            <mss:Message MimeType="text/plain" Encoding="UTF-8">This is the receipt message content</mss:Message>
         </mss:MSS_ReceiptReq>
      </MSS_Receipt>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_ReceiptType/MSS_ReceiptRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Receipt [encrypted]"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_ReceiptPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">
   <soapenv:Body>
      <MSS_Receipt>
         <mss:MSS_ReceiptReq MSSP_TransID="h4ltjd" MinorVersion="1" MajorVersion="1" TimeOut="10" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>4179123456</mss:MSISDN>
            </mss:MobileUser>
            <mss:Message MimeType="application/alauda-rsamessage" Encoding="BASE64">e/MgF8/mQWVnZpkXjDJM02MptxtLybcVGFkxZ045HTrjKQhLOE4lmgB0z+h2u4yROak8q+j63E6p86RxOlvAil18jne0ds1J8n6FYRvPkyLUnEBjEnzLZEQ1UTfU7jByo7c5rV2qiMkxnnPMXiW7wgk9GlGxNgx0WrH7xvnkyEU=</mss:Message>
         </mss:MSS_ReceiptReq>
      </MSS_Receipt>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nevis.ch/esauth/wsdl/mss.wsdl/MSS_ReceiptType/MSS_ReceiptRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="MSS_ProfileQuery" type="wsdl" bindingName="{http://uri.etsi.org/TS102204/etsi204-kiuru.wsdl}MSS_ProfileQueryBinding" soapVersion="1_2" anonymous="optional" definition="C:/TEMP/WSDL/mobileid-mss-wsdl-v1.0.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:////Sg1005z-v2/tluhaph1$/Documents/_MINK%20SoapUI/full-integration-test-with-etsi-ref/etsi204-kiuru.wsdl"><con:part><con:url>file:////Sg1005z-v2/tluhaph1$/Documents/_MINK%20SoapUI/full-integration-test-with-etsi-ref/etsi204-kiuru.wsdl</con:url><con:content><![CDATA[<!--This is a manually expanded version of the partial WSDL in 
     ETSI TS 102 204, v 1.1.2, section 10.5, WSDL Description and
     section 7 in the same document.

     This has been updated towards full SOAP1.2 compliance,
     because the original ETSI WSDL is in fact SOAP1.1, even
     though it claims to be SOAP1.2.-->
<definitions name="KIURU" targetNamespace="http://uri.etsi.org/TS102204/etsi204-kiuru.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:msrs="http://uri.etsi.org/TS102207/v1.1.2#" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:wsoap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://uri.etsi.org/TS102204/etsi204-kiuru.wsdl">
  <!--<xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" location="MSS-plus-swisscom.xsd"/> 
	  <xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="MSS-plus-swisscom.xsd" />-->
  <types>
    <xs:schema targetNamespace="http://uri.etsi.org/TS102204/etsi204-kiuru.wsdl">
      <xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="MSS-plus-swisscom.xsd"/>
    </xs:schema>
  </types>
  <!--Messages-->
  <message name="MSS_SignatureInput">
    <part name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"/>
  </message>
  <message name="MSS_SignatureOutput">
    <part name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"/>
  </message>
  <message name="MSS_StatusQueryInput">
    <part name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
  </message>
  <message name="MSS_StatusQueryOutput">
    <part name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
  </message>
  <message name="MSS_ReceiptInput">
    <part name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
  </message>
  <message name="MSS_ReceiptOutput">
    <part name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
  </message>
  <message name="MSS_RegistrationInput">
    <part name="MSS_RegistrationReq" type="mss:MSS_RegistrationReqType"/>
  </message>
  <message name="MSS_RegistrationOutput">
    <part name="MSS_RegistrationResp" type="mss:MSS_RegistrationRespType"/>
  </message>
  <message name="MSS_ProfileQueryInput">
    <part name="MSS_ProfileReq" type="mss:MSS_ProfileReqType"/>
  </message>
  <message name="MSS_ProfileQueryOutput">
    <part name="MSS_ProfileResp" type="mss:MSS_ProfileRespType"/>
  </message>
  <message name="MSS_NotificationInput">
    <part name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
  </message>
  <message name="MSS_NotificationOutput">
    <part name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
  </message>
  <message name="MSS_HandshakeInput">
    <part name="MSS_HandshakeReq" type="mss:MSS_HandshakeReqType"/>
  </message>
  <message name="MSS_HandshakeOutput">
    <part name="MSS_HandshakeResp" type="mss:MSS_HandshakeRespType"/>
  </message>
  <!--PortTypes-->
  <!--Note the inconsistent naming (PortType or Type). 
     This is directly specified in 204/Section 7.-->
  <portType name="MSS_SignaturePortType">
    <operation name="MSS_Signature">
      <input message="tns:MSS_SignatureInput"/>
      <output message="tns:MSS_SignatureOutput"/>
    </operation>
  </portType>
  <portType name="MSS_StatusQueryType">
    <operation name="MSS_StatusQuery">
      <input message="tns:MSS_StatusQueryInput"/>
      <output message="tns:MSS_StatusQueryOutput"/>
    </operation>
  </portType>
  <portType name="MSS_ReceiptType">
    <operation name="MSS_Receipt">
      <input message="tns:MSS_ReceiptInput"/>
      <output message="tns:MSS_ReceiptOutput"/>
    </operation>
  </portType>
  <portType name="MSS_RegistrationType">
    <operation name="MSS_Registration">
      <input message="tns:MSS_RegistrationInput"/>
      <output message="tns:MSS_RegistrationOutput"/>
    </operation>
  </portType>
  <portType name="MSS_ProfileQueryType">
    <operation name="MSS_ProfileQuery">
      <input message="tns:MSS_ProfileQueryInput"/>
      <output message="tns:MSS_ProfileQueryOutput"/>
    </operation>
  </portType>
  <portType name="MSS_NotificationPortType">
    <operation name="MSS_Notification">
      <input message="tns:MSS_NotificationInput"/>
      <output message="tns:MSS_NotificationOutput"/>
    </operation>
  </portType>
  <portType name="MSS_HandshakePortType">
    <operation name="MSS_Handshake">
      <input message="tns:MSS_HandshakeInput"/>
      <output message="tns:MSS_HandshakeOutput"/>
    </operation>
  </portType>
  <!--Bindings-->
  <binding name="MSS_SignatureBinding" type="tns:MSS_SignaturePortType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_Signature">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_SignatureReq" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_SignatureResp" use="literal"/>
      </output>
    </operation>
  </binding>
  <binding name="MSS_StatusQueryBinding" type="tns:MSS_StatusQueryType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_StatusQuery">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_StatusReq" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_StatusResp" use="literal"/>
      </output>
    </operation>
  </binding>
  <binding name="MSS_ReceiptBinding" type="tns:MSS_ReceiptType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_Receipt">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_ReceiptReq" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_ReceiptResp" use="literal"/>
      </output>
    </operation>
  </binding>
  <binding name="MSS_NotificationBinding" type="tns:MSS_NotificationPortType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_Notification">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_StatusResp" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_ReceiptReq" use="literal"/>
      </output>
    </operation>
  </binding>
  <binding name="MSS_ProfileQueryBinding" type="tns:MSS_ProfileQueryType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_ProfileQuery">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_ProfileReq" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_ProfileResp" use="literal"/>
      </output>
    </operation>
  </binding>
  <binding name="MSS_HandshakeBinding" type="tns:MSS_HandshakePortType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_Handshake">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_HandshakeReq" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_HandshakeResp" use="literal"/>
      </output>
    </operation>
  </binding>
  <binding name="MSS_RegistrationBinding" type="tns:MSS_RegistrationType">
    <wsoap12:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="MSS_Registration">
      <wsoap12:operation soapActionRequired="false" style="rpc"/>
      <input>
        <wsoap12:body parts="MSS_RegistrationReq" use="literal"/>
      </input>
      <output>
        <wsoap12:body parts="MSS_RegistrationResp" use="literal"/>
      </output>
    </operation>
  </binding>
  <!--Service-->
  <service name="MSS_SignatureService">
    <port name="MSS_SignaturePort" binding="tns:MSS_SignatureBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
    <port name="MSS_StatusQueryPort" binding="tns:MSS_StatusQueryBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
    <port name="MSS_ReceiptPort" binding="tns:MSS_ReceiptBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
    <port name="MSS_NotificationPort" binding="tns:MSS_NotificationBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
    <port name="MSS_ProfileQueryPort" binding="tns:MSS_ProfileQueryBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
    <port name="MSS_HandshakePort" binding="tns:MSS_HandshakeBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
    <port name="MSS_RegistrationPort" binding="tns:MSS_RegistrationBinding">
      <wsoap12:address location="https://127.0.0.1:8443"/>
    </port>
  </service>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\MSS-plus-swisscom.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://uri.etsi.org/TS102204/v1.1.2#" elementFormDefault="qualified" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:fi="http://mss.ficom.fi/TS102204/v1.0.0#" xmlns:mreg="http://www.methics.fi/MSSPRegistration/v1.0.0#" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:env="http://www.w3.org/2003/05/soap-envelope">
  <!--xsi:schemaLocation="http://uri.etsi.org/TS102204/v1.1.2# ts-102-204.xsd"-->
  <!--<xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="ts-102-204.xsd" />-->
  <xs:include schemaLocation="ts-102-204.xsd"/>
  <xs:import namespace="http://www.methics.fi/MSSPRegistration/v1.0.0#" schemaLocation="schema/methics/mssp-registration-swisscom-1.0.xsd"/>
  <!--<xs:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"/>-->
  <xs:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="schema/w3/xmldsig-core-schema.xsd"/>
  <!--<xs:import namespace="http://www.w3.org/2001/04/xmlenc#" schemaLocation="http://www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd"/>-->
  <xs:import namespace="http://www.w3.org/2001/04/xmlenc#" schemaLocation="schema/w3/xenc-schema.xsd"/>
  <!--<xs:import namespace="http://www.w3.org/2003/05/soap-envelope" schemaLocation="http://www.w3.org/2003/05/soap-envelope/"/>-->
  <xs:import namespace="http://www.w3.org/2003/05/soap-envelope" schemaLocation="schema/w3/soap-envelope.xsd"/>
  <!--The following import is a manual addition; see Ficom 1.1-->
  <xs:import namespace="http://mss.ficom.fi/TS102204/v1.0.0#" schemaLocation="schema/ficom/ficom.xsd"/>
  <!--<xs:import namespace="urn:oasis:names:tc:SAML:2.0:assertion" schemaLocation="saml-schema-assertion-2.0.xsd" />-->
  <xs:import namespace="urn:oasis:names:tc:SAML:2.0:protocol" schemaLocation="schema/oasis/saml-schema-protocol-2.0.xsd"/>
  <!--<xs:import namespace="urn:oasis:names:tc:SPML:2.0" schemaLocation="pstc_spmlv2_core.xsd" />-->
  <!--<xs:import namespace="http://www.w3.org/2002/03/xkms#" schemaLocation="xkms.xsd" />-->
  <!--This is the ETSI TS 102 204 XML Schema, 
     but we've added direct references to
     the Ficom schema in here. 

     We've added MobileUser to MSS_StatusReq, as per Tdoc CSPt 040513.

     We've added MSSP_TransID to MSS_StatusResp, as per Tdoc SCPt 040534.-->
  <xs:complexType name="MessageAbstractType" abstract="true">
    <xs:sequence>
      <xs:element name="AP_Info">
        <xs:complexType>
          <xs:attribute name="AP_ID" type="xs:anyURI" use="required"/>
          <xs:attribute name="AP_TransID" type="xs:NCName" use="required"/>
          <xs:attribute name="AP_PWD" type="xs:string" use="required"/>
          <xs:attribute name="Instant" type="xs:dateTime" use="required"/>
          <xs:attribute name="AP_URL" type="xs:anyURI" use="optional"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="MSSP_Info">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="MSSP_ID" type="mss:MeshMemberType"/>
          </xs:sequence>
          <xs:attribute name="Instant" type="xs:dateTime" use="optional"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="MajorVersion" type="xs:integer" use="required"/>
    <xs:attribute name="MinorVersion" type="xs:integer" use="required"/>
  </xs:complexType>
  <xs:element name="MSS_SignatureReq" type="mss:MSS_SignatureReqType"/>
  <xs:complexType name="MSS_SignatureReqType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType"/>
          <xs:element name="DataToBeSigned" type="mss:DataType"/>
          <xs:element name="DataToBeDisplayed" type="mss:DataType" minOccurs="0"/>
          <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
          <xs:element name="AdditionalServices" minOccurs="0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Service" type="mss:AdditionalServiceType" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="MSS_Format" type="mss:mssURIType" minOccurs="0"/>
          <xs:element name="KeyReference" type="mss:KeyReferenceType" minOccurs="0"/>
          <xs:element name="SignatureProfileComparison" type="mss:SignatureProfileComparisonType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="ValidityDate" type="xs:dateTime" use="optional"/>
        <xs:attribute name="TimeOut" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="MessagingMode" type="mss:MessagingModeType" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_SignatureResp" type="mss:MSS_SignatureRespType"/>
  <xs:complexType name="MSS_SignatureRespType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType"/>
          <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
          <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0"/>
          <xs:element name="Status" type="mss:StatusType"/>
        </xs:sequence>
        <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_StatusReq" type="mss:MSS_StatusReqType"/>
  <xs:complexType name="MSS_StatusReqType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <!--The following sequence is a manual addition; see Tdoc SCPt 040513-->
        <!--We do not use this, it's here merely as a placeholder.-->
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_StatusResp" type="mss:MSS_StatusRespType"/>
  <xs:complexType name="MSS_StatusRespType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType"/>
          <xs:element name="MSS_Signature" type="mss:SignatureType" minOccurs="0"/>
          <xs:element name="Status" type="mss:StatusType"/>
        </xs:sequence>
        <!--The following attribute is a manual addition; see Tdoc SCPt 040534-->
        <!--We use this in notification requests only. Other status responses never contain this.-->
        <xs:attribute name="MSSP_TransID" type="xs:NCName" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_RegistrationReq" type="mss:MSS_RegistrationReqType"/>
  <xs:complexType name="MSS_RegistrationReqType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType"/>
          <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
          <xs:element name="EncryptResponseBy" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
          <!--Kiuru-specific addition-->
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="mreg:RegistrationInput"/>
            <xs:element ref="mreg:EncryptedRegistrationInput"/>
            <xs:element ref="mreg:EncryptionCertificates"/>
            <!--REM <xs:any namespace="##other" processContents="lax"/>-->
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_RegistrationResp" type="mss:MSS_RegistrationRespType"/>
  <xs:complexType name="MSS_RegistrationRespType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="Status" type="mss:StatusType"/>
          <xs:element name="EncryptedData" type="xenc:EncryptedType" minOccurs="0"/>
          <xs:element name="CertificateURI" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="X509Certificate" type="xs:base64Binary" minOccurs="0"/>
          <xs:element name="PublicKey" type="xs:base64Binary" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_ProfileReq" type="mss:MSS_ProfileReqType"/>
  <xs:complexType name="MSS_ProfileReqType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_ProfileResp" type="mss:MSS_ProfileRespType"/>
  <xs:complexType name="MSS_ProfileRespType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="SignatureProfile" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Status" type="mss:StatusType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_ReceiptReq" type="mss:MSS_ReceiptReqType"/>
  <xs:complexType name="MSS_ReceiptReqType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="MobileUser" type="mss:MobileUserType"/>
          <xs:element name="Status" type="mss:StatusType" minOccurs="0"/>
          <xs:element name="Message" type="mss:DataType" minOccurs="0"/>
          <xs:element name="SignedReceipt" type="ds:SignatureType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_ReceiptResp" type="mss:MSS_ReceiptRespType"/>
  <xs:complexType name="MSS_ReceiptRespType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="Status" type="mss:StatusType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_HandshakeReq" type="mss:MSS_HandshakeReqType"/>
  <xs:complexType name="MSS_HandshakeReqType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="SecureMethods">
            <xs:complexType>
              <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="Certificates">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="RootCAs">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="DN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="SignatureAlgList">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MSS_HandshakeResp" type="mss:MSS_HandshakeRespType"/>
  <xs:complexType name="MSS_HandshakeRespType">
    <xs:complexContent>
      <xs:extension base="mss:MessageAbstractType">
        <xs:sequence>
          <xs:element name="SecureMethods">
            <xs:complexType>
              <xs:attribute name="MSS_Signature" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Registration" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Notification" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_ProfileQuery" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Receipt" type="xs:boolean" use="required"/>
              <xs:attribute name="MSS_Status" type="xs:boolean" use="required"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="MatchingMSSPCertificates">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="MatchingAPCertificates">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="MatchingSigAlgList">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Algorithm" type="mss:mssURIType" minOccurs="0" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="MSSP_TransID" type="xs:NCName" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DataType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="MimeType" type="xs:string" use="optional"/>
        <xs:attribute name="Encoding" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="SignatureProfileComparisonType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="exact"/>
      <xs:enumeration value="minimum"/>
      <xs:enumeration value="better"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MessagingModeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="synch"/>
      <xs:enumeration value="asynchClientServer"/>
      <xs:enumeration value="asynchServerServer"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="DigestAlgAndValueType">
    <xs:sequence>
      <xs:element name="DigestMethod" type="ds:DigestMethodType" minOccurs="0"/>
      <xs:element name="DigestValue" type="ds:DigestValueType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="mssURIType">
    <xs:sequence>
      <xs:element name="mssURI" type="xs:anyURI"/>
      <xs:element name="DigestAlgAndValue" type="mss:DigestAlgAndValueType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="KeyReferenceType">
    <xs:sequence>
      <xs:element name="CertificateURL" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="CertificateIssuerDN" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="HashOfUsersPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="HashOfCAPublicKey" type="mss:DigestAlgAndValueType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SignatureType">
    <xs:choice>
      <xs:element name="XMLSignature" type="ds:SignatureType"/>
      <xs:element name="Base64Signature" type="xs:base64Binary"/>
      <xs:element ref="fi:PKCS1"/>
      <!--<xs:any namespace="##other" processContents="lax" minOccurs="0"/>-->
      <!--this can also be an advanced XML Signature-->
    </xs:choice>
  </xs:complexType>
  <xs:element name="MSS_MessageSignature">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ds:Signature"/>
      </xs:sequence>
      <xs:attribute ref="env:role" use="required"/>
      <xs:attribute ref="env:mustUnderstand" use="optional"/>
      <!--Bunch of optional SOAP header attributes for
           SOAP 1.0 compability to be able to ignore them if client sends them-->
      <!--REMOVED - INVALID XML?
      <xs:attribute ref="env:relay"          use="optional"/>
      <xs:attribute name="env:processed"  type="xs:boolean"    use="optional"/>
      <xs:attribute name="env:actor"      type="xs:string"     use="optional"/>-->
    </xs:complexType>
  </xs:element>
  <xs:complexType name="AdditionalServiceType">
    <xs:sequence>
      <xs:element name="Description" type="mss:mssURIType"/>
      <xs:element name="Entity" type="mss:MeshMemberType" minOccurs="0"/>
      <!--The following choice is a manual Ficom addition; see Ficom 1.1-->
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="fi:SessionID"/>
        <xs:element ref="fi:EventID"/>
        <xs:element ref="fi:NoSpamCode"/>
        <xs:element ref="fi:UserLang"/>
        <xs:element ref="mreg:CaseId"/>
        <xs:element ref="samlp:AttributeQuery"/>
        <!--<xs:any namespace="##other" processContents="lax" />-->
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="StatusType">
    <xs:sequence>
      <xs:element name="StatusCode" type="mss:StatusCodeType"/>
      <xs:element name="StatusMessage" type="xs:string" minOccurs="0"/>
      <xs:element name="StatusDetail" type="mss:StatusDetailType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="StatusCodeType">
    <xs:sequence>
      <xs:element name="StatusCode" type="mss:StatusCodeType" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="Value" type="xs:integer" use="required"/>
  </xs:complexType>
  <xs:complexType name="StatusDetailType">
    <!--Kiuru-specific addition-->
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="mreg:RegistrationOutput"/>
      <xs:element ref="mreg:EncryptedRegistrationOutput"/>
      <xs:element ref="mreg:EncryptionCertificates"/>
      <xs:element ref="fi:ServiceResponses"/>
      <!--<xs:any namespace="##other" processContents="lax" />-->
    </xs:choice>
    <!--<xs:sequence> 
      <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/> 
    </xs:sequence>-->
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\methics\mssp-registration-swisscom-1.0.xsd</con:url><con:content><![CDATA[<!--<!DOCTYPE schema  PUBLIC "-//W3C//DTD XMLSchema 200102//EN"
                         "XMLSchema.dtd"
 [
   <!ATTLIST schema
     xmlns:mreg CDATA #FIXED 'http://www.methics.fi/MSSPRegistration/v1.0.0#'
     xmlns:mss CDATA #FIXED 'http://uri.etsi.org/TS102204/v1.1.2#-sco'
     xmlns:xenc CDATA #FIXED 'http://www.w3.org/2001/04/xmlenc#'
     xmlns:xs CDATA #FIXED 'http://www.w3.org/2001/XMLSchema'
     xmlns:saml CDATA #FIXED 'urn:oasis:names:tc:SAML:2.0:assertion'
     xmlns:samlp CDATA #FIXED 'urn:oasis:names:tc:SAML:2.0:protocol'
     xmlns:spml CDATA #FIXED 'urn:oasis:names:tc:SPML:2.0'
     xmlns:xkms CDATA #FIXED 'http://www.w3.org/2002/03/xkms#'>
   <!ENTITY ds    'http://www.w3.org/2000/09/xmldsig#'>
   <!ENTITY mreg  'http://www.methics.fi/MSSPRegistration/v1.0.0#'>
   <!ENTITY mss   'http://uri.etsi.org/TS102204/v1.1.2#'>
   <!ENTITY xenc  'http://www.w3.org/2001/04/xmlenc#'>
   <!ENTITY xs    'http://www.w3.org/2001/XMLSchema'>
   <!ENTITY saml  'urn:oasis:names:tc:SAML:2.0:assertion'>
   <!ENTITY samlp 'urn:oasis:names:tc:SAML:2.0:protocol'>
   <!ENTITY spml  'urn:oasis:names:tc:SPML:2.0'>
   <!ENTITY xkms  'http://www.w3.org/2002/03/xkms#'>
   <!ENTITY % p ''>
   <!ENTITY % s ''>
  ]> 

     This file includes temporary workarounds. 
     1) SPML2 stuff does not work correctly with our Castor tool. It's commented out.
     2) The reference to MSS.xsd points to MSS-plus-swisscom.xsd, our internal version of MSS.xsd.-->
<xs:schema targetNamespace="http://www.methics.fi/MSSPRegistration/v1.0.0#" elementFormDefault="qualified" xmlns:mreg="http://www.methics.fi/MSSPRegistration/v1.0.0#" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" xmlns:spml="urn:oasis:names:tc:SPML:2.0" xmlns:xkms="http://www.w3.org/2002/03/xkms#">
  <xs:annotation>
    <xs:documentation>This is a simplified version for Swisscom.

	  Document identifier: MSSP-registration-swisscom-1.0.xsd
      Location: etc/xmlschemas/mssp-registration-swisscom-1.0.xsd
      Revision history:
      V1.0.0 (November 2011)

      mss:MSS_RegistrationReq
      - mreg:RegistrationInput (*)
       - mreg:(Mreg)Request (*)
        - (actual payload here)
      
      mss:MSS_RegistrationResp
      - mreg:RegistrationOutput (*)
       - mreg:(Mreg)Response (*)
        - (actual payload here)
	  
	  Original reference:
	  
      Document identifier: MSSP-registration-1.0.xsd
      Location: etc/xmlschemas/mssp-registration-1.0.xsd
      Revision history:
      V1.0.0 (August 2009)

      This file describes the "mreg" schema, which is designed to supplement 
      mss:MSS_RegistrationReq. This schema wraps the SAML2, XKMS2, SPML2 protocols
      inside MSS_RegistrationReqs for the purpose of 207 roaming. Additionally, this
      schema introduces a number of useful operations for MSS mobileuser, sim card
      and certificate lifecycle management. 
      
      An mreg:RegistrationInput travels inside an mss:MSS_RegistrationReq message and
      a corresponding mreg:RegistrationOutput comes back in an mss:MSS_RegistrationResp
      message. Inside a RegistrationInput are a number of mreg "requests", each 
      wrapping an actual operation. The responses to each operation come in an mreg
      "response", inside the RegistrationOutput.
      
      mss:MSS_RegistrationReq
      - mreg:RegistrationInput (*)
       - mreg:(Mreg|Saml2|Spml2|Xkms2)Request (*)
        - (actual payload here)
      
      mss:MSS_RegistrationResp
      - mreg:RegistrationOutput (*)
       - mreg:(Mreg|Saml2|Spml2|Xkms2)Response (*)
        - (actual payload here)</xs:documentation>
  </xs:annotation>
  <xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="../../ts-102-204.xsd"/>
  <!--<xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="../../MSS-plus-swisscom.xsd"/>-->
  <!--<xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="../../MSS-plus-swisscom-same-namespace.xsd"/>-->
  <xs:import namespace="http://www.w3.org/2001/04/xmlenc#" schemaLocation="../w3/xenc-schema.xsd"/>
  <xs:import namespace="urn:oasis:names:tc:SAML:2.0:assertion" schemaLocation="../oasis/saml-schema-assertion-2.0.xsd"/>
  <xs:import namespace="urn:oasis:names:tc:SAML:2.0:protocol" schemaLocation="../oasis/saml-schema-protocol-2.0.xsd"/>
  <!--<xs:import namespace="urn:oasis:names:tc:SPML:2.0" schemaLocation="pstc_spmlv2_core.xsd" />-->
  <!--<xs:import namespace="http://www.w3.org/2002/03/xkms#" schemaLocation="xkms.xsd" />-->
  <xs:element name="EncryptedRegistrationInput" type="mreg:EncryptedElementType"/>
  <xs:element name="EncryptedRegistrationOutput" type="mreg:EncryptedElementType"/>
  <xs:complexType name="EncryptedElementType">
    <xs:sequence>
      <xs:element ref="xenc:EncryptedData"/>
      <xs:element ref="xenc:EncryptedKey" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="EncryptionCertificates" type="mreg:CertificatesType"/>
  <xs:complexType name="CertificatesType">
    <xs:sequence>
      <xs:element name="Certificate" type="xs:base64Binary" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="RegistrationInput">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="mreg:CaseId" minOccurs="0" maxOccurs="1"/>
        <xs:element name="Target" type="mreg:TargetType"/>
        <xs:element name="MregRequest" type="mreg:MregRequestType" minOccurs="0" maxOccurs="unbounded"/>
        <!--<xs:element name="Saml2Request" type="mreg:Saml2RequestType"   minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Spml2Request" type="mreg:Spml2RequestType"   minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Xkms2Request" type="mreg:Xkms2RequestType"   minOccurs="0" maxOccurs="unbounded" />-->
      </xs:sequence>
      <xs:attribute name="InputId" type="xs:ID" use="optional"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="RegistrationOutput">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="mreg:CaseId" minOccurs="0" maxOccurs="1"/>
        <xs:element name="MregResponse" type="mreg:MregResponseType" minOccurs="0" maxOccurs="unbounded"/>
        <!--<xs:element name="Saml2Response"   type="mreg:Saml2ResponseType"   minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Spml2Response"   type="mreg:Spml2ResponseType"   minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Xkms2Response"   type="mreg:Xkms2ResponseType"   minOccurs="0" maxOccurs="unbounded"/>-->
      </xs:sequence>
      <xs:attribute name="InputId" type="xs:ID" use="optional"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CaseId" type="xs:string"/>
  <xs:complexType name="RequestBaseType" abstract="true">
    <xs:attribute name="RequestId" type="xs:ID" use="optional"/>
    <xs:attribute name="Step" type="xs:string" use="optional"/>
  </xs:complexType>
  <xs:complexType name="OperationBaseType" abstract="true">
    <xs:sequence>
      <xs:element name="Parameter" type="mreg:NameValueType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="Name" type="xs:string" use="required"/>
    <xs:attribute name="ID" type="xs:ID" use="optional"/>
  </xs:complexType>
  <xs:complexType name="OperationInputType">
    <xs:complexContent>
      <xs:extension base="mreg:OperationBaseType"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationOutputType">
    <xs:complexContent>
      <xs:extension base="mreg:OperationBaseType">
        <xs:sequence>
          <xs:element name="Status" type="mreg:OperationStatusType" minOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationStatusType">
    <xs:sequence>
      <xs:element name="OperationStatusCode" type="xs:integer"/>
      <xs:element name="OperationStatusMessage" type="xs:string" minOccurs="0"/>
      <xs:element name="OperationStatusDetail" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CertificationOperationType">
    <xs:complexContent>
      <xs:extension base="mreg:OperationInputType">
        <xs:sequence>
          <xs:element name="IdentityAssertion" type="saml:AssertionType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ProvisioningOperationType">
    <xs:complexContent>
      <xs:extension base="mreg:OperationInputType"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="NameValueType">
    <xs:attribute name="Name" type="xs:string" use="required"/>
    <xs:attribute name="Value" type="xs:string" use="optional"/>
    <xs:attribute name="MimeType" type="xs:string" use="optional"/>
    <xs:attribute name="Encoding" type="xs:string" use="optional"/>
  </xs:complexType>
  <xs:complexType name="TargetType">
    <xs:choice>
      <xs:element name="MobileUser" type="mss:MobileUserType"/>
      <xs:element name="SimCard" type="mreg:SimCardType"/>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="SimCardType">
    <xs:sequence>
      <xs:element name="ICCID" type="xs:string" minOccurs="0"/>
      <xs:element name="IMSI" type="xs:string" minOccurs="0"/>
      <xs:element name="MSISDN" type="xs:string" minOccurs="0"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="WirelessOperation" type="mreg:OperationInputType"/>
  <xs:element name="CertificationOperation" type="mreg:CertificationOperationType"/>
  <xs:element name="ProvisioningOperation" type="mreg:ProvisioningOperationType"/>
  <xs:element name="OperationOutput" type="mreg:OperationOutputType"/>
  <xs:complexType name="MregRequestType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="mreg:WirelessOperation"/>
          <xs:element ref="mreg:CertificationOperation"/>
          <xs:element ref="mreg:ProvisioningOperation"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MregResponseType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="mreg:OperationOutput"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--<xs:complexType name="Saml2RequestType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="samlp:AssertionIDRequest"/>
          <xs:element ref="samlp:SubjectQuery"/>
          <xs:element ref="samlp:AuthnQuery"/>
          <xs:element ref="samlp:AttributeQuery"/>
          <xs:element ref="samlp:AuthzDecisionQuery"/>
          <xs:element ref="samlp:AuthnRequest"/>
          <xs:element ref="samlp:ArtifactResolve"/>
          <xs:element ref="samlp:ManageNameIDRequest"/>
          <xs:element ref="samlp:LogoutRequest"/>
          <xs:element ref="samlp:NameIDMappingRequest"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Saml2ResponseType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="samlp:Response"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Spml2RequestType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="spml2:addRequest"/>
          <xs:element ref="spml2:modifyRequest"/>
          <xs:element ref="spml2:deleteRequest"/>
          <xs:element ref="spml2:lookupRequest"/>
          <xs:element ref="spml2:listTargetsRequest"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Spml2ResponseType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="spml2:addResponse"/>
          <xs:element ref="spml2:modifyResponse"/>
          <xs:element ref="spml2:deleteResponse"/>
          <xs:element ref="spml2:lookupResponse"/>
          <xs:element ref="spml2:listTargetsResponse"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Xkms2RequestType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="xkms:PendingRequest"/>
          <xs:element ref="xkms:CompoundRequest"/>
          <xs:element ref="xkms:LocateRequest"/>
          <xs:element ref="xkms:ValidateRequest"/>
          <xs:element ref="xkms:RegisterRequest"/>
          <xs:element ref="xkms:ReissueRequest"/>
          <xs:element ref="xkms:RevokeRequest"/> 
          <xs:element ref="xkms:RecoverRequest"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Xkms2ResponseType">
    <xs:complexContent>
      <xs:extension base="mreg:RequestBaseType">
        <xs:choice>
          <xs:element ref="xkms:CompoundResult"/>
          <xs:element ref="xkms:LocateResult"/>
          <xs:element ref="xkms:ValidateResult"/>
          <xs:element ref="xkms:RegisterResult"/>
          <xs:element ref="xkms:ReissueResult"/>
          <xs:element ref="xkms:RevokeResult"/> 
          <xs:element ref="xkms:RecoverResult"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>-->
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\ts-102-204.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://uri.etsi.org/TS102204/v1.1.2#" elementFormDefault="qualified" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:env="http://www.w3.org/2003/05/soap-envelope">
  <xs:complexType name="MeshMemberType">
    <xs:sequence>
      <xs:element name="DNSName" type="xs:string" minOccurs="0"/>
      <xs:element name="IPAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="URI" type="xs:anyURI" minOccurs="0"/>
      <xs:element name="IdentifierString" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MobileUserType">
    <xs:sequence>
      <xs:element name="IdentityIssuer" type="mss:MeshMemberType" minOccurs="0"/>
      <xs:element name="UserIdentifier" type="xs:string" minOccurs="0"/>
      <xs:element name="HomeMSSP" type="mss:MeshMemberType" minOccurs="0"/>
      <xs:element name="MSISDN" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\w3\xenc-schema.xsd</con:url><con:content><![CDATA[<!DOCTYPE schema PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd">
<schema version="1.0" targetNamespace="http://www.w3.org/2001/04/xmlenc#" elementFormDefault="qualified" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <!--<import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"/>-->
  <import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="./xmldsig-core-schema.xsd"/>
  <complexType name="EncryptedType" abstract="true">
    <sequence>
      <element name="EncryptionMethod" type="xenc:EncryptionMethodType" minOccurs="0"/>
      <element ref="ds:KeyInfo" minOccurs="0"/>
      <element ref="xenc:CipherData"/>
      <element ref="xenc:EncryptionProperties" minOccurs="0"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
    <attribute name="Type" type="anyURI" use="optional"/>
    <attribute name="MimeType" type="string" use="optional"/>
    <attribute name="Encoding" type="anyURI" use="optional"/>
  </complexType>
  <complexType name="EncryptionMethodType" mixed="true">
    <sequence>
      <element name="KeySize" minOccurs="0" type="xenc:KeySizeType"/>
      <element name="OAEPparams" minOccurs="0" type="base64Binary"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/>
  </complexType>
  <simpleType name="KeySizeType">
    <restriction base="integer"/>
  </simpleType>
  <element name="CipherData" type="xenc:CipherDataType"/>
  <complexType name="CipherDataType">
    <choice>
      <element name="CipherValue" type="base64Binary"/>
      <element ref="xenc:CipherReference"/>
    </choice>
  </complexType>
  <element name="CipherReference" type="xenc:CipherReferenceType"/>
  <complexType name="CipherReferenceType">
    <choice>
      <element name="Transforms" type="xenc:TransformsType" minOccurs="0"/>
    </choice>
    <attribute name="URI" type="anyURI" use="required"/>
  </complexType>
  <complexType name="TransformsType">
    <sequence>
      <element ref="ds:Transform" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="EncryptedData" type="xenc:EncryptedDataType"/>
  <complexType name="EncryptedDataType">
    <complexContent>
      <extension base="xenc:EncryptedType"></extension>
    </complexContent>
  </complexType>
  <!--Children of ds:KeyInfo-->
  <element name="EncryptedKey" type="xenc:EncryptedKeyType"/>
  <complexType name="EncryptedKeyType">
    <complexContent>
      <extension base="xenc:EncryptedType">
        <sequence>
          <element ref="xenc:ReferenceList" minOccurs="0"/>
          <element name="CarriedKeyName" type="string" minOccurs="0"/>
        </sequence>
        <attribute name="Recipient" type="string" use="optional"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="AgreementMethod" type="xenc:AgreementMethodType"/>
  <complexType name="AgreementMethodType" mixed="true">
    <sequence>
      <element name="KA-Nonce" minOccurs="0" type="base64Binary"/>
      <!--<element ref="ds:DigestMethod" minOccurs="0"/>-->
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      <element name="OriginatorKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
      <element name="RecipientKeyInfo" minOccurs="0" type="ds:KeyInfoType"/>
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/>
  </complexType>
  <!--End Children of ds:KeyInfo-->
  <element name="ReferenceList">
    <complexType>
      <choice minOccurs="1" maxOccurs="unbounded">
        <element name="DataReference" type="xenc:ReferenceType"/>
        <element name="KeyReference" type="xenc:ReferenceType"/>
      </choice>
    </complexType>
  </element>
  <complexType name="ReferenceType">
    <sequence>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="URI" type="anyURI" use="required"/>
  </complexType>
  <element name="EncryptionProperties" type="xenc:EncryptionPropertiesType"/>
  <complexType name="EncryptionPropertiesType">
    <sequence>
      <element ref="xenc:EncryptionProperty" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <element name="EncryptionProperty" type="xenc:EncryptionPropertyType"/>
  <complexType name="EncryptionPropertyType" mixed="true">
    <choice maxOccurs="unbounded">
      <any namespace="##other" processContents="lax"/>
    </choice>
    <attribute name="Target" type="anyURI" use="optional"/>
    <attribute name="Id" type="ID" use="optional"/>
    <anyAttribute namespace="http://www.w3.org/XML/1998/namespace"/>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\w3\xmldsig-core-schema.xsd</con:url><con:content><![CDATA[<!DOCTYPE schema PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd">
<!--Schema for XML Signatures
    http://www.w3.org/2000/09/xmldsig#
    $Revision: 1.1 $ on $Date: 2002/02/08 20:32:26 $ by $Author: reagle $

    Copyright 2001 The Internet Society and W3C (Massachusetts Institute
    of Technology, Institut National de Recherche en Informatique et en
    Automatique, Keio University). All Rights Reserved.
    http://www.w3.org/Consortium/Legal/

    This document is governed by the W3C Software License [1] as described
    in the FAQ [2].

    [1] http://www.w3.org/Consortium/Legal/copyright-software-19980720
    [2] http://www.w3.org/Consortium/Legal/IPR-FAQ-20000620.html#DTD-->
<schema targetNamespace="http://www.w3.org/2000/09/xmldsig#" version="0.1" elementFormDefault="qualified" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <!--Basic Types Defined for Signatures-->
  <simpleType name="CryptoBinary">
    <restriction base="base64Binary"></restriction>
  </simpleType>
  <!--Start Signature-->
  <element name="Signature" type="ds:SignatureType"/>
  <complexType name="SignatureType">
    <sequence>
      <element ref="ds:SignedInfo"/>
      <element ref="ds:SignatureValue"/>
      <element ref="ds:KeyInfo" minOccurs="0"/>
      <element ref="ds:Object" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <element name="SignatureValue" type="ds:SignatureValueType"/>
  <complexType name="SignatureValueType">
    <simpleContent>
      <extension base="base64Binary">
        <attribute name="Id" type="ID" use="optional"/>
      </extension>
    </simpleContent>
  </complexType>
  <!--Start SignedInfo-->
  <element name="SignedInfo" type="ds:SignedInfoType"/>
  <complexType name="SignedInfoType">
    <sequence>
      <element ref="ds:CanonicalizationMethod"/>
      <element ref="ds:SignatureMethod"/>
      <element ref="ds:Reference" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <element name="CanonicalizationMethod" type="ds:CanonicalizationMethodType"/>
  <complexType name="CanonicalizationMethodType" mixed="true">
    <sequence>
      <any namespace="##any" minOccurs="0" maxOccurs="unbounded"/>
      <!--(0,unbounded) elements from (1,1) namespace-->
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/>
  </complexType>
  <element name="SignatureMethod" type="ds:SignatureMethodType"/>
  <complexType name="SignatureMethodType" mixed="true">
    <sequence>
      <element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      <!--(0,unbounded) elements from (1,1) external namespace-->
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/>
  </complexType>
  <!--Start Reference-->
  <element name="Reference" type="ds:ReferenceType"/>
  <complexType name="ReferenceType">
    <sequence>
      <element ref="ds:Transforms" minOccurs="0"/>
      <element ref="ds:DigestMethod"/>
      <element ref="ds:DigestValue"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
    <attribute name="URI" type="anyURI" use="optional"/>
    <attribute name="Type" type="anyURI" use="optional"/>
  </complexType>
  <element name="Transforms" type="ds:TransformsType"/>
  <complexType name="TransformsType">
    <sequence>
      <element ref="ds:Transform" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="Transform" type="ds:TransformType"/>
  <complexType name="TransformType" mixed="true">
    <choice minOccurs="0" maxOccurs="unbounded">
      <any namespace="##other" processContents="lax"/>
      <!--(1,1) elements from (0,unbounded) namespaces-->
      <element name="XPath" type="string"/>
    </choice>
    <attribute name="Algorithm" type="anyURI" use="required"/>
  </complexType>
  <!--End Reference-->
  <element name="DigestMethod" type="ds:DigestMethodType"/>
  <complexType name="DigestMethodType" mixed="true">
    <sequence>
      <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/>
  </complexType>
  <element name="DigestValue" type="ds:DigestValueType"/>
  <simpleType name="DigestValueType">
    <restriction base="base64Binary"/>
  </simpleType>
  <!--End SignedInfo-->
  <!--Start KeyInfo-->
  <element name="KeyInfo" type="ds:KeyInfoType"/>
  <complexType name="KeyInfoType" mixed="true">
    <choice maxOccurs="unbounded">
      <element ref="ds:KeyName"/>
      <element ref="ds:KeyValue"/>
      <element ref="ds:RetrievalMethod"/>
      <element ref="ds:X509Data"/>
      <element ref="ds:PGPData"/>
      <element ref="ds:SPKIData"/>
      <element ref="ds:MgmtData"/>
      <any processContents="lax" namespace="##other"/>
      <!--(1,1) elements from (0,unbounded) namespaces-->
    </choice>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <element name="KeyName" type="string"/>
  <element name="MgmtData" type="string"/>
  <element name="KeyValue" type="ds:KeyValueType"/>
  <complexType name="KeyValueType" mixed="true">
    <choice>
      <element ref="ds:DSAKeyValue"/>
      <element ref="ds:RSAKeyValue"/>
      <any namespace="##other" processContents="lax"/>
    </choice>
  </complexType>
  <element name="RetrievalMethod" type="ds:RetrievalMethodType"/>
  <complexType name="RetrievalMethodType">
    <sequence>
      <element ref="ds:Transforms" minOccurs="0"/>
    </sequence>
    <attribute name="URI" type="anyURI"/>
    <attribute name="Type" type="anyURI" use="optional"/>
  </complexType>
  <!--Start X509Data-->
  <element name="X509Data" type="ds:X509DataType"/>
  <complexType name="X509DataType">
    <sequence maxOccurs="unbounded">
      <choice>
        <element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/>
        <element name="X509SKI" type="base64Binary"/>
        <element name="X509SubjectName" type="string"/>
        <element name="X509Certificate" type="base64Binary"/>
        <element name="X509CRL" type="base64Binary"/>
        <any namespace="##other" processContents="lax"/>
      </choice>
    </sequence>
  </complexType>
  <complexType name="X509IssuerSerialType">
    <sequence>
      <element name="X509IssuerName" type="string"/>
      <element name="X509SerialNumber" type="integer"/>
    </sequence>
  </complexType>
  <!--End X509Data-->
  <!--Begin PGPData-->
  <element name="PGPData" type="ds:PGPDataType"/>
  <complexType name="PGPDataType">
    <choice>
      <sequence>
        <element name="PGPKeyID" type="base64Binary"/>
        <element name="PGPKeyPacket" type="base64Binary" minOccurs="0"/>
        <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
      <sequence>
        <element name="PGPKeyPacket" type="base64Binary"/>
        <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
    </choice>
  </complexType>
  <!--End PGPData-->
  <!--Begin SPKIData-->
  <element name="SPKIData" type="ds:SPKIDataType"/>
  <complexType name="SPKIDataType">
    <sequence maxOccurs="unbounded">
      <element name="SPKISexp" type="base64Binary"/>
      <any namespace="##other" processContents="lax" minOccurs="0"/>
    </sequence>
  </complexType>
  <!--End SPKIData-->
  <!--End KeyInfo-->
  <!--Start Object (Manifest, SignatureProperty)-->
  <element name="Object" type="ds:ObjectType"/>
  <complexType name="ObjectType" mixed="true">
    <sequence minOccurs="0" maxOccurs="unbounded">
      <any namespace="##any" processContents="lax"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
    <attribute name="MimeType" type="string" use="optional"/>
    <!--add a grep facet-->
    <attribute name="Encoding" type="anyURI" use="optional"/>
  </complexType>
  <element name="Manifest" type="ds:ManifestType"/>
  <complexType name="ManifestType">
    <sequence>
      <element ref="ds:Reference" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <element name="SignatureProperties" type="ds:SignaturePropertiesType"/>
  <complexType name="SignaturePropertiesType">
    <sequence>
      <element ref="ds:SignatureProperty" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <element name="SignatureProperty" type="ds:SignaturePropertyType"/>
  <complexType name="SignaturePropertyType" mixed="true">
    <choice maxOccurs="unbounded">
      <any namespace="##other" processContents="lax"/>
      <!--(1,1) elements from (1,unbounded) namespaces-->
    </choice>
    <attribute name="Target" type="anyURI" use="required"/>
    <attribute name="Id" type="ID" use="optional"/>
  </complexType>
  <!--End Object (Manifest, SignatureProperty)-->
  <!--Start Algorithm Parameters-->
  <simpleType name="HMACOutputLengthType">
    <restriction base="integer"/>
  </simpleType>
  <!--Start KeyValue Element-types-->
  <element name="DSAKeyValue" type="ds:DSAKeyValueType"/>
  <complexType name="DSAKeyValueType">
    <sequence>
      <sequence minOccurs="0">
        <element name="P" type="ds:CryptoBinary"/>
        <element name="Q" type="ds:CryptoBinary"/>
      </sequence>
      <element name="G" type="ds:CryptoBinary" minOccurs="0"/>
      <element name="Y" type="ds:CryptoBinary"/>
      <element name="J" type="ds:CryptoBinary" minOccurs="0"/>
      <sequence minOccurs="0">
        <element name="Seed" type="ds:CryptoBinary"/>
        <element name="PgenCounter" type="ds:CryptoBinary"/>
      </sequence>
    </sequence>
  </complexType>
  <element name="RSAKeyValue" type="ds:RSAKeyValueType"/>
  <complexType name="RSAKeyValueType">
    <sequence>
      <element name="Modulus" type="ds:CryptoBinary"/>
      <element name="Exponent" type="ds:CryptoBinary"/>
    </sequence>
  </complexType>
  <!--End KeyValue Element-types-->
  <!--End Signature-->
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\oasis\saml-schema-assertion-2.0.xsd</con:url><con:content><![CDATA[<schema targetNamespace="urn:oasis:names:tc:SAML:2.0:assertion" elementFormDefault="unqualified" attributeFormDefault="unqualified" blockDefault="substitution" version="2.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
  <!--There is one change here. It is local imports instead of w3 imports.-->
  <!--original 
    <import namespace="http://www.w3.org/2000/09/xmldsig#"
        schemaLocation="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"/>
    <import namespace="http://www.w3.org/2001/04/xmlenc#"
        schemaLocation="http://www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd"/>-->
  <!--local-->
  <import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="../w3/xmldsig-core-schema.xsd"/>
  <!--<xs:import namespace="http://www.w3.org/2001/04/xmlenc#" schemaLocation="http://www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd"/>-->
  <import namespace="http://www.w3.org/2001/04/xmlenc#" schemaLocation="../w3/xenc-schema.xsd"/>
  <annotation>
    <documentation>Document identifier: saml-schema-assertion-2.0
            Location: http://docs.oasis-open.org/security/saml/v2.0/
            Revision history:
            V1.0 (November, 2002):
              Initial Standard Schema.
            V1.1 (September, 2003):
              Updates within the same V1.0 namespace.
            V2.0 (March, 2005):
              New assertion schema for SAML V2.0 namespace.</documentation>
  </annotation>
  <attributeGroup name="IDNameQualifiers">
    <attribute name="NameQualifier" type="string" use="optional"/>
    <attribute name="SPNameQualifier" type="string" use="optional"/>
  </attributeGroup>
  <element name="BaseID" type="saml:BaseIDAbstractType"/>
  <complexType name="BaseIDAbstractType" abstract="true">
    <attributeGroup ref="saml:IDNameQualifiers"/>
  </complexType>
  <element name="NameID" type="saml:NameIDType"/>
  <complexType name="NameIDType">
    <simpleContent>
      <extension base="string">
        <attributeGroup ref="saml:IDNameQualifiers"/>
        <attribute name="Format" type="anyURI" use="optional"/>
        <attribute name="SPProvidedID" type="string" use="optional"/>
      </extension>
    </simpleContent>
  </complexType>
  <complexType name="EncryptedElementType">
    <sequence>
      <element ref="xenc:EncryptedData"/>
      <element ref="xenc:EncryptedKey" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="EncryptedID" type="saml:EncryptedElementType"/>
  <element name="Issuer" type="saml:NameIDType"/>
  <element name="AssertionIDRef" type="NCName"/>
  <element name="AssertionURIRef" type="anyURI"/>
  <element name="Assertion" type="saml:AssertionType"/>
  <complexType name="AssertionType">
    <sequence>
      <element ref="saml:Issuer"/>
      <element ref="ds:Signature" minOccurs="0"/>
      <element ref="saml:Subject" minOccurs="0"/>
      <element ref="saml:Conditions" minOccurs="0"/>
      <element ref="saml:Advice" minOccurs="0"/>
      <choice minOccurs="0" maxOccurs="unbounded">
        <element ref="saml:Statement"/>
        <element ref="saml:AuthnStatement"/>
        <element ref="saml:AuthzDecisionStatement"/>
        <element ref="saml:AttributeStatement"/>
      </choice>
    </sequence>
    <attribute name="Version" type="string" use="required"/>
    <attribute name="ID" type="ID" use="required"/>
    <attribute name="IssueInstant" type="dateTime" use="required"/>
  </complexType>
  <element name="Subject" type="saml:SubjectType"/>
  <complexType name="SubjectType">
    <choice>
      <sequence>
        <choice>
          <element ref="saml:BaseID"/>
          <element ref="saml:NameID"/>
          <element ref="saml:EncryptedID"/>
        </choice>
        <element ref="saml:SubjectConfirmation" minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
      <element ref="saml:SubjectConfirmation" maxOccurs="unbounded"/>
    </choice>
  </complexType>
  <element name="SubjectConfirmation" type="saml:SubjectConfirmationType"/>
  <complexType name="SubjectConfirmationType">
    <sequence>
      <choice minOccurs="0">
        <element ref="saml:BaseID"/>
        <element ref="saml:NameID"/>
        <element ref="saml:EncryptedID"/>
      </choice>
      <element ref="saml:SubjectConfirmationData" minOccurs="0"/>
    </sequence>
    <attribute name="Method" type="anyURI" use="required"/>
  </complexType>
  <element name="SubjectConfirmationData" type="saml:SubjectConfirmationDataType"/>
  <complexType name="SubjectConfirmationDataType" mixed="true">
    <complexContent>
      <restriction base="anyType">
        <sequence>
          <any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="NotBefore" type="dateTime" use="optional"/>
        <attribute name="NotOnOrAfter" type="dateTime" use="optional"/>
        <attribute name="Recipient" type="anyURI" use="optional"/>
        <attribute name="InResponseTo" type="NCName" use="optional"/>
        <attribute name="Address" type="string" use="optional"/>
        <anyAttribute namespace="##other" processContents="lax"/>
      </restriction>
    </complexContent>
  </complexType>
  <complexType name="KeyInfoConfirmationDataType" mixed="false">
    <complexContent>
      <restriction base="saml:SubjectConfirmationDataType">
        <sequence>
          <element ref="ds:KeyInfo" maxOccurs="unbounded"/>
        </sequence>
      </restriction>
    </complexContent>
  </complexType>
  <element name="Conditions" type="saml:ConditionsType"/>
  <complexType name="ConditionsType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="saml:Condition"/>
      <element ref="saml:AudienceRestriction"/>
      <element ref="saml:OneTimeUse"/>
      <element ref="saml:ProxyRestriction"/>
    </choice>
    <attribute name="NotBefore" type="dateTime" use="optional"/>
    <attribute name="NotOnOrAfter" type="dateTime" use="optional"/>
  </complexType>
  <element name="Condition" type="saml:ConditionAbstractType"/>
  <complexType name="ConditionAbstractType" abstract="true"/>
  <element name="AudienceRestriction" type="saml:AudienceRestrictionType"/>
  <complexType name="AudienceRestrictionType">
    <complexContent>
      <extension base="saml:ConditionAbstractType">
        <sequence>
          <element ref="saml:Audience" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="Audience" type="anyURI"/>
  <element name="OneTimeUse" type="saml:OneTimeUseType"/>
  <complexType name="OneTimeUseType">
    <complexContent>
      <extension base="saml:ConditionAbstractType"/>
    </complexContent>
  </complexType>
  <element name="ProxyRestriction" type="saml:ProxyRestrictionType"/>
  <complexType name="ProxyRestrictionType">
    <complexContent>
      <extension base="saml:ConditionAbstractType">
        <sequence>
          <element ref="saml:Audience" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="Count" type="nonNegativeInteger" use="optional"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="Advice" type="saml:AdviceType"/>
  <complexType name="AdviceType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="saml:AssertionIDRef"/>
      <element ref="saml:AssertionURIRef"/>
      <element ref="saml:Assertion"/>
      <element ref="saml:EncryptedAssertion"/>
      <any namespace="##other" processContents="lax"/>
    </choice>
  </complexType>
  <element name="EncryptedAssertion" type="saml:EncryptedElementType"/>
  <element name="Statement" type="saml:StatementAbstractType"/>
  <complexType name="StatementAbstractType" abstract="true"/>
  <element name="AuthnStatement" type="saml:AuthnStatementType"/>
  <complexType name="AuthnStatementType">
    <complexContent>
      <extension base="saml:StatementAbstractType">
        <sequence>
          <element ref="saml:SubjectLocality" minOccurs="0"/>
          <element ref="saml:AuthnContext"/>
        </sequence>
        <attribute name="AuthnInstant" type="dateTime" use="required"/>
        <attribute name="SessionIndex" type="string" use="optional"/>
        <attribute name="SessionNotOnOrAfter" type="dateTime" use="optional"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="SubjectLocality" type="saml:SubjectLocalityType"/>
  <complexType name="SubjectLocalityType">
    <attribute name="Address" type="string" use="optional"/>
    <attribute name="DNSName" type="string" use="optional"/>
  </complexType>
  <element name="AuthnContext" type="saml:AuthnContextType"/>
  <complexType name="AuthnContextType">
    <sequence>
      <choice>
        <sequence>
          <element ref="saml:AuthnContextClassRef"/>
          <choice minOccurs="0">
            <element ref="saml:AuthnContextDecl"/>
            <element ref="saml:AuthnContextDeclRef"/>
          </choice>
        </sequence>
        <choice>
          <element ref="saml:AuthnContextDecl"/>
          <element ref="saml:AuthnContextDeclRef"/>
        </choice>
      </choice>
      <element ref="saml:AuthenticatingAuthority" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="AuthnContextClassRef" type="anyURI"/>
  <element name="AuthnContextDeclRef" type="anyURI"/>
  <element name="AuthnContextDecl" type="anyType"/>
  <element name="AuthenticatingAuthority" type="anyURI"/>
  <element name="AuthzDecisionStatement" type="saml:AuthzDecisionStatementType"/>
  <complexType name="AuthzDecisionStatementType">
    <complexContent>
      <extension base="saml:StatementAbstractType">
        <sequence>
          <element ref="saml:Action" maxOccurs="unbounded"/>
          <element ref="saml:Evidence" minOccurs="0"/>
        </sequence>
        <attribute name="Resource" type="anyURI" use="required"/>
        <attribute name="Decision" type="saml:DecisionType" use="required"/>
      </extension>
    </complexContent>
  </complexType>
  <simpleType name="DecisionType">
    <restriction base="string">
      <enumeration value="Permit"/>
      <enumeration value="Deny"/>
      <enumeration value="Indeterminate"/>
    </restriction>
  </simpleType>
  <element name="Action" type="saml:ActionType"/>
  <complexType name="ActionType">
    <simpleContent>
      <extension base="string">
        <attribute name="Namespace" type="anyURI" use="required"/>
      </extension>
    </simpleContent>
  </complexType>
  <element name="Evidence" type="saml:EvidenceType"/>
  <complexType name="EvidenceType">
    <choice maxOccurs="unbounded">
      <element ref="saml:AssertionIDRef"/>
      <element ref="saml:AssertionURIRef"/>
      <element ref="saml:Assertion"/>
      <element ref="saml:EncryptedAssertion"/>
    </choice>
  </complexType>
  <element name="AttributeStatement" type="saml:AttributeStatementType"/>
  <complexType name="AttributeStatementType">
    <complexContent>
      <extension base="saml:StatementAbstractType">
        <choice maxOccurs="unbounded">
          <element ref="saml:Attribute"/>
          <element ref="saml:EncryptedAttribute"/>
        </choice>
      </extension>
    </complexContent>
  </complexType>
  <element name="Attribute" type="saml:AttributeType"/>
  <complexType name="AttributeType">
    <sequence>
      <element ref="saml:AttributeValue" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="Name" type="string" use="required"/>
    <attribute name="NameFormat" type="anyURI" use="optional"/>
    <attribute name="FriendlyName" type="string" use="optional"/>
    <anyAttribute namespace="##other" processContents="lax"/>
  </complexType>
  <element name="AttributeValue" type="anyType" nillable="true"/>
  <element name="EncryptedAttribute" type="saml:EncryptedElementType"/>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\oasis\saml-schema-protocol-2.0.xsd</con:url><con:content><![CDATA[<schema targetNamespace="urn:oasis:names:tc:SAML:2.0:protocol" elementFormDefault="unqualified" attributeFormDefault="unqualified" blockDefault="substitution" version="2.0" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <!--There are two changes here. The first is to use local imports instead of w3 imports. 
The second is to wrap the ResponseType assertions inside a sequence. The reason is to work around a castor bug. Externally, the behavior is the same.-->
  <!--FIRST CHANGE
    <import namespace="http://www.w3.org/2000/09/xmldsig#"
        schemaLocation="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"/>-->
  <!--<xs:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"/>-->
  <import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="../w3/xmldsig-core-schema.xsd"/>
  <import namespace="urn:oasis:names:tc:SAML:2.0:assertion" schemaLocation="saml-schema-assertion-2.0.xsd"/>
  <!--<import namespace="urn:oasis:names:tc:SAML:2.0:protocol" schemaLocation="saml-schema-protocol-2.0.xsd" />-->
  <!--<xs:import namespace="urn:oasis:names:tc:SPML:2.0" schemaLocation="pstc_spmlv2_core.xsd" />-->
  <!--<xs:import namespace="http://www.w3.org/2002/03/xkms#" schemaLocation="xkms.xsd" />-->
  <annotation>
    <documentation>Document identifier: saml-schema-protocol-2.0
            Location: http://docs.oasis-open.org/security/saml/v2.0/
            Revision history:
            V1.0 (November, 2002):
              Initial Standard Schema.
            V1.1 (September, 2003):
              Updates within the same V1.0 namespace.
            V2.0 (March, 2005):
              New protocol schema based in a SAML V2.0 namespace.</documentation>
  </annotation>
  <complexType name="RequestAbstractType" abstract="true">
    <sequence>
      <element ref="saml:Issuer" minOccurs="0"/>
      <element ref="ds:Signature" minOccurs="0"/>
      <element ref="samlp:Extensions" minOccurs="0"/>
    </sequence>
    <attribute name="ID" type="ID" use="required"/>
    <attribute name="Version" type="string" use="required"/>
    <attribute name="IssueInstant" type="dateTime" use="required"/>
    <attribute name="Destination" type="anyURI" use="optional"/>
    <attribute name="Consent" type="anyURI" use="optional"/>
  </complexType>
  <element name="Extensions" type="samlp:ExtensionsType"/>
  <complexType name="ExtensionsType">
    <sequence>
      <any namespace="##other" processContents="lax" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="StatusResponseType">
    <sequence>
      <element ref="saml:Issuer" minOccurs="0"/>
      <element ref="ds:Signature" minOccurs="0"/>
      <element ref="samlp:Extensions" minOccurs="0"/>
      <element ref="samlp:Status"/>
    </sequence>
    <attribute name="ID" type="ID" use="required"/>
    <attribute name="InResponseTo" type="NCName" use="optional"/>
    <attribute name="Version" type="string" use="required"/>
    <attribute name="IssueInstant" type="dateTime" use="required"/>
    <attribute name="Destination" type="anyURI" use="optional"/>
    <attribute name="Consent" type="anyURI" use="optional"/>
  </complexType>
  <element name="Status" type="samlp:StatusType"/>
  <complexType name="StatusType">
    <sequence>
      <element ref="samlp:StatusCode"/>
      <element ref="samlp:StatusMessage" minOccurs="0"/>
      <element ref="samlp:StatusDetail" minOccurs="0"/>
    </sequence>
  </complexType>
  <element name="StatusCode" type="samlp:StatusCodeType"/>
  <complexType name="StatusCodeType">
    <sequence>
      <element ref="samlp:StatusCode" minOccurs="0"/>
    </sequence>
    <attribute name="Value" type="anyURI" use="required"/>
  </complexType>
  <element name="StatusMessage" type="string"/>
  <element name="StatusDetail" type="samlp:StatusDetailType"/>
  <complexType name="StatusDetailType">
    <sequence>
      <any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="AssertionIDRequest" type="samlp:AssertionIDRequestType"/>
  <complexType name="AssertionIDRequestType">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <element ref="saml:AssertionIDRef" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="SubjectQuery" type="samlp:SubjectQueryAbstractType"/>
  <complexType name="SubjectQueryAbstractType" abstract="true">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <element ref="saml:Subject"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="AuthnQuery" type="samlp:AuthnQueryType"/>
  <complexType name="AuthnQueryType">
    <complexContent>
      <extension base="samlp:SubjectQueryAbstractType">
        <sequence>
          <element ref="samlp:RequestedAuthnContext" minOccurs="0"/>
        </sequence>
        <attribute name="SessionIndex" type="string" use="optional"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="RequestedAuthnContext" type="samlp:RequestedAuthnContextType"/>
  <complexType name="RequestedAuthnContextType">
    <choice>
      <element ref="saml:AuthnContextClassRef" maxOccurs="unbounded"/>
      <element ref="saml:AuthnContextDeclRef" maxOccurs="unbounded"/>
    </choice>
    <attribute name="Comparison" type="samlp:AuthnContextComparisonType" use="optional"/>
  </complexType>
  <simpleType name="AuthnContextComparisonType">
    <restriction base="string">
      <enumeration value="exact"/>
      <enumeration value="minimum"/>
      <enumeration value="maximum"/>
      <enumeration value="better"/>
    </restriction>
  </simpleType>
  <element name="AttributeQuery" type="samlp:AttributeQueryType"/>
  <complexType name="AttributeQueryType">
    <complexContent>
      <extension base="samlp:SubjectQueryAbstractType">
        <sequence>
          <element ref="saml:Attribute" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="AuthzDecisionQuery" type="samlp:AuthzDecisionQueryType"/>
  <complexType name="AuthzDecisionQueryType">
    <complexContent>
      <extension base="samlp:SubjectQueryAbstractType">
        <sequence>
          <element ref="saml:Action" maxOccurs="unbounded"/>
          <element ref="saml:Evidence" minOccurs="0"/>
        </sequence>
        <attribute name="Resource" type="anyURI" use="required"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="AuthnRequest" type="samlp:AuthnRequestType"/>
  <complexType name="AuthnRequestType">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <element ref="saml:Subject" minOccurs="0"/>
          <element ref="samlp:NameIDPolicy" minOccurs="0"/>
          <element ref="saml:Conditions" minOccurs="0"/>
          <element ref="samlp:RequestedAuthnContext" minOccurs="0"/>
          <element ref="samlp:Scoping" minOccurs="0"/>
        </sequence>
        <attribute name="ForceAuthn" type="boolean" use="optional"/>
        <attribute name="IsPassive" type="boolean" use="optional"/>
        <attribute name="ProtocolBinding" type="anyURI" use="optional"/>
        <attribute name="AssertionConsumerServiceIndex" type="unsignedShort" use="optional"/>
        <attribute name="AssertionConsumerServiceURL" type="anyURI" use="optional"/>
        <attribute name="AttributeConsumingServiceIndex" type="unsignedShort" use="optional"/>
        <attribute name="ProviderName" type="string" use="optional"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="NameIDPolicy" type="samlp:NameIDPolicyType"/>
  <complexType name="NameIDPolicyType">
    <attribute name="Format" type="anyURI" use="optional"/>
    <attribute name="SPNameQualifier" type="string" use="optional"/>
    <attribute name="AllowCreate" type="boolean" use="optional"/>
  </complexType>
  <element name="Scoping" type="samlp:ScopingType"/>
  <complexType name="ScopingType">
    <sequence>
      <element ref="samlp:IDPList" minOccurs="0"/>
      <element ref="samlp:RequesterID" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
    <attribute name="ProxyCount" type="nonNegativeInteger" use="optional"/>
  </complexType>
  <element name="RequesterID" type="anyURI"/>
  <element name="IDPList" type="samlp:IDPListType"/>
  <complexType name="IDPListType">
    <sequence>
      <element ref="samlp:IDPEntry" maxOccurs="unbounded"/>
      <element ref="samlp:GetComplete" minOccurs="0"/>
    </sequence>
  </complexType>
  <element name="IDPEntry" type="samlp:IDPEntryType"/>
  <complexType name="IDPEntryType">
    <attribute name="ProviderID" type="anyURI" use="required"/>
    <attribute name="Name" type="string" use="optional"/>
    <attribute name="Loc" type="anyURI" use="optional"/>
  </complexType>
  <element name="GetComplete" type="anyURI"/>
  <element name="Response" type="samlp:ResponseType"/>
  <complexType name="ResponseType">
    <complexContent>
      <extension base="samlp:StatusResponseType">
        <!--SECOND CHANGE
                <choice minOccurs="0" maxOccurs="unbounded">
                    <element ref="saml:Assertion"/>
                    <element ref="saml:EncryptedAssertion"/>
                </choice>-->
        <sequence>
          <choice minOccurs="0" maxOccurs="unbounded">
            <element ref="saml:Assertion"/>
            <element ref="saml:EncryptedAssertion"/>
          </choice>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="ArtifactResolve" type="samlp:ArtifactResolveType"/>
  <complexType name="ArtifactResolveType">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <element ref="samlp:Artifact"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="Artifact" type="string"/>
  <element name="ArtifactResponse" type="samlp:ArtifactResponseType"/>
  <complexType name="ArtifactResponseType">
    <complexContent>
      <extension base="samlp:StatusResponseType">
        <sequence>
          <any namespace="##any" processContents="lax" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="ManageNameIDRequest" type="samlp:ManageNameIDRequestType"/>
  <complexType name="ManageNameIDRequestType">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <choice>
            <element ref="saml:NameID"/>
            <element ref="saml:EncryptedID"/>
          </choice>
          <choice>
            <element ref="samlp:NewID"/>
            <element ref="samlp:NewEncryptedID"/>
            <element ref="samlp:Terminate"/>
          </choice>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="NewID" type="string"/>
  <element name="NewEncryptedID" type="saml:EncryptedElementType"/>
  <element name="Terminate" type="samlp:TerminateType"/>
  <complexType name="TerminateType"/>
  <element name="ManageNameIDResponse" type="samlp:StatusResponseType"/>
  <element name="LogoutRequest" type="samlp:LogoutRequestType"/>
  <complexType name="LogoutRequestType">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <choice>
            <element ref="saml:BaseID"/>
            <element ref="saml:NameID"/>
            <element ref="saml:EncryptedID"/>
          </choice>
          <element ref="samlp:SessionIndex" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="Reason" type="string" use="optional"/>
        <attribute name="NotOnOrAfter" type="dateTime" use="optional"/>
      </extension>
    </complexContent>
  </complexType>
  <element name="SessionIndex" type="string"/>
  <element name="LogoutResponse" type="samlp:StatusResponseType"/>
  <element name="NameIDMappingRequest" type="samlp:NameIDMappingRequestType"/>
  <complexType name="NameIDMappingRequestType">
    <complexContent>
      <extension base="samlp:RequestAbstractType">
        <sequence>
          <choice>
            <element ref="saml:BaseID"/>
            <element ref="saml:NameID"/>
            <element ref="saml:EncryptedID"/>
          </choice>
          <element ref="samlp:NameIDPolicy"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <element name="NameIDMappingResponse" type="samlp:NameIDMappingResponseType"/>
  <complexType name="NameIDMappingResponseType">
    <complexContent>
      <extension base="samlp:StatusResponseType">
        <choice>
          <element ref="saml:NameID"/>
          <element ref="saml:EncryptedID"/>
        </choice>
      </extension>
    </complexContent>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\w3\soap-envelope.xsd</con:url><con:content><![CDATA[<!--Schema defined in the SOAP Version 1.2 Part 1 specification
     Recommendation:
     http://www.w3.org/TR/2003/REC-soap12-part1-20030624/
     $Id: soap-envelope.xsd,v 1.2 2006/12/20 20:43:36 ylafon Exp $

     Copyright (C)2003 W3C(R) (MIT, ERCIM, Keio), All Rights Reserved.
     W3C viability, trademark, document use and software licensing rules
     apply.
     http://www.w3.org/Consortium/Legal/

     This document is governed by the W3C Software License [1] as
     described in the FAQ [2].

     [1] http://www.w3.org/Consortium/Legal/copyright-software-19980720
     [2] http://www.w3.org/Consortium/Legal/IPR-FAQ-20000620.html#DTD-->
<xs:schema targetNamespace="http://www.w3.org/2003/05/soap-envelope" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.w3.org/2003/05/soap-envelope">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <!--<xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/>-->
  <!--Envelope, header and body-->
  <xs:element name="Envelope" type="tns:Envelope"/>
  <xs:complexType name="Envelope">
    <xs:sequence>
      <xs:element ref="tns:Header" minOccurs="0"/>
      <xs:element ref="tns:Body" minOccurs="1"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="Header" type="tns:Header"/>
  <xs:complexType name="Header">
    <xs:annotation>
      <xs:documentation>Elements replacing the wildcard MUST be namespace qualified, but can be in the targetNamespace</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="Body" type="tns:Body"/>
  <xs:complexType name="Body">
    <xs:sequence>
      <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <!--Global Attributes.  The following attributes are intended to be
  usable via qualified attribute names on any complex type referencing
  them.-->
  <xs:attribute name="mustUnderstand" type="xs:boolean" default="0"/>
  <xs:attribute name="relay" type="xs:boolean" default="0"/>
  <xs:attribute name="role" type="xs:anyURI"/>
  <!--'encodingStyle' indicates any canonicalization conventions
  followed in the contents of the containing element.  For example, the
  value 'http://www.w3.org/2003/05/soap-encoding' indicates the pattern
  described in the SOAP Version 1.2 Part 2: Adjuncts Recommendation-->
  <xs:attribute name="encodingStyle" type="xs:anyURI"/>
  <xs:element name="Fault" type="tns:Fault"/>
  <xs:complexType name="Fault" final="extension">
    <xs:annotation>
      <xs:documentation>Fault reporting structure</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Code" type="tns:faultcode"/>
      <xs:element name="Reason" type="tns:faultreason"/>
      <xs:element name="Node" type="xs:anyURI" minOccurs="0"/>
      <xs:element name="Role" type="xs:anyURI" minOccurs="0"/>
      <xs:element name="Detail" type="tns:detail" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="faultreason">
    <xs:sequence>
      <xs:element name="Text" type="tns:reasontext" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="reasontext">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute ref="xml:lang" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="faultcode">
    <xs:sequence>
      <xs:element name="Value" type="tns:faultcodeEnum"/>
      <xs:element name="Subcode" type="tns:subcode" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="faultcodeEnum">
    <xs:restriction base="xs:QName">
      <xs:enumeration value="tns:DataEncodingUnknown"/>
      <xs:enumeration value="tns:MustUnderstand"/>
      <xs:enumeration value="tns:Receiver"/>
      <xs:enumeration value="tns:Sender"/>
      <xs:enumeration value="tns:VersionMismatch"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="subcode">
    <xs:sequence>
      <xs:element name="Value" type="xs:QName"/>
      <xs:element name="Subcode" type="tns:subcode" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="detail">
    <xs:sequence>
      <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <!--Global element declaration and complex type definition for header entry returned due to a mustUnderstand fault-->
  <xs:element name="NotUnderstood" type="tns:NotUnderstoodType"/>
  <xs:complexType name="NotUnderstoodType">
    <xs:attribute name="qname" type="xs:QName" use="required"/>
  </xs:complexType>
  <!--Global element and associated types for managing version transition as described in Appendix A of the SOAP Version 1.2 Part 1 Recommendation-->
  <xs:complexType name="SupportedEnvType">
    <xs:attribute name="qname" type="xs:QName" use="required"/>
  </xs:complexType>
  <xs:element name="Upgrade" type="tns:UpgradeType"/>
  <xs:complexType name="UpgradeType">
    <xs:sequence>
      <xs:element name="SupportedEnvelope" type="tns:SupportedEnvType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\w3\xml.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" xml:lang="en" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>See http://www.w3.org/XML/1998/namespace.html and
   http://www.w3.org/TR/REC-xml for information about this namespace.

    This schema document describes the XML namespace, in a form
    suitable for import by other schema documents.  

    Note that local names in this namespace are intended to be defined
    only by the World Wide Web Consortium or its subgroups.  The
    following names are currently defined in this namespace and should
    not be used with conflicting semantics by any Working Group,
    specification, or document instance:

    base (as an attribute name): denotes an attribute whose value
         provides a URI to be used as the base for interpreting any
         relative URIs in the scope of the element on which it
         appears; its value is inherited.  This name is reserved
         by virtue of its definition in the XML Base specification.

    lang (as an attribute name): denotes an attribute whose value
         is a language code for the natural language of the content of
         any element; its value is inherited.  This name is reserved
         by virtue of its definition in the XML specification.
  
    space (as an attribute name): denotes an attribute whose
         value is a keyword indicating what whitespace processing
         discipline is intended for the content of the element; its
         value is inherited.  This name is reserved by virtue of its
         definition in the XML specification.

    Father (in any context at all): denotes Jon Bosak, the chair of 
         the original XML Working Group.  This name is reserved by 
         the following decision of the W3C XML Plenary and 
         XML Coordination groups:

             In appreciation for his vision, leadership and dedication
             the W3C XML Plenary on this 10th day of February, 2000
             reserves for Jon Bosak in perpetuity the XML name
             xml:Father</xs:documentation>
  </xs:annotation>
  <xs:annotation>
    <xs:documentation>This schema defines attributes and an attribute group
        suitable for use by
        schemas wishing to allow xml:base, xml:lang or xml:space attributes
        on elements they define.

        To enable this, such a schema must import this schema
        for the XML namespace, e.g. as follows:
        &lt;schema . . .>
         . . .
         &lt;import namespace="http://www.w3.org/XML/1998/namespace"
                    schemaLocation="http://www.w3.org/2001/03/xml.xsd"/>

        Subsequently, qualified reference to any of the attributes
        or the group defined below will have the desired effect, e.g.

        &lt;type . . .>
         . . .
         &lt;attributeGroup ref="xml:specialAttrs"/>
 
         will define a type which will schema-validate an instance
         element with any of those attributes</xs:documentation>
  </xs:annotation>
  <xs:annotation>
    <xs:documentation>In keeping with the XML Schema WG's standard versioning
   policy, this schema document will persist at
   http://www.w3.org/2001/03/xml.xsd.
   At the date of issue it can also be found at
   http://www.w3.org/2001/xml.xsd.
   The schema document at that URI may however change in the future,
   in order to remain compatible with the latest version of XML Schema
   itself.  In other words, if the XML Schema namespace changes, the version
   of this document at
   http://www.w3.org/2001/xml.xsd will change
   accordingly; the version at
   http://www.w3.org/2001/03/xml.xsd will not change.</xs:documentation>
  </xs:annotation>
  <xs:attribute name="lang" type="xs:language">
    <xs:annotation>
      <xs:documentation>In due course, we should install the relevant ISO 2- and 3-letter
         codes as the enumerated possible values . . .</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="space" default="preserve">
    <xs:simpleType>
      <xs:restriction base="xs:NCName">
        <xs:enumeration value="default"/>
        <xs:enumeration value="preserve"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="base" type="xs:anyURI">
    <xs:annotation>
      <xs:documentation>See http://www.w3.org/TR/xmlbase/ for
                     information about this attribute.</xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attributeGroup name="specialAttrs">
    <xs:attribute ref="xml:base"/>
    <xs:attribute ref="xml:lang"/>
    <xs:attribute ref="xml:space"/>
  </xs:attributeGroup>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\\\\Sg1005z-v2\tluhaph1$\Documents\_MINK%20SoapUI\full-integration-test-with-etsi-ref\schema\ficom\ficom.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://mss.ficom.fi/TS102204/v1.0.0#" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol">
  <xs:import namespace="http://uri.etsi.org/TS102204/v1.1.2#" schemaLocation="../../MSS-plus-swisscom.xsd"/>
  <!--<xs:import namespace="urn:oasis:names:tc:SAML:2.0:assertion" schemaLocation="../oasis/saml-schema-assertion-2.0.xsd" />-->
  <xs:import namespace="urn:oasis:names:tc:SAML:2.0:protocol" schemaLocation="../oasis/saml-schema-protocol-2.0.xsd"/>
  <!--<xs:import namespace="urn:oasis:names:tc:SPML:2.0" schemaLocation="pstc_spmlv2_core.xsd" />-->
  <!--<xs:import namespace="http://www.w3.org/2002/03/xkms#" schemaLocation="xkms.xsd" />-->
  <xs:element name="NoSpamCode">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute name="verify" type="xs:string" default="yes"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="EventID" type="xs:string"/>
  <xs:element name="SessionID" type="xs:string"/>
  <!--<xs:element name="UserLang" type="xs:string" default="fi"/>-->
  <!--Note: this is used inside <xs:choice>, and Castor blows the stack
   when parsing input with any _other_ of choice elements, than
   the UserLang.-->
  <xs:element name="UserLang" type="xs:string"/>
  <!--as per JHS 106-->
  <xs:element name="PostalAddress">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Name" type="xs:string"/>
        <xs:element name="StreetAddress" type="xs:string"/>
        <xs:element name="PostalCode" type="xs:string"/>
        <xs:element name="Town" type="xs:string"/>
        <xs:element name="Country" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ServiceResponses">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ServiceResponse" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Description" type="mss:mssURIType"/>
              <xs:element name="Entity" type="mss:MeshMemberType" minOccurs="0"/>
              <xs:element name="Status" type="mss:StatusType" minOccurs="0"/>
              <xs:element ref="samlp:Response" minOccurs="0"/>
              <!--<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>-->
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="PKCS1">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="SignatureValue" type="xs:base64Binary"/>
        <xs:element name="X509Certificate" type="xs:base64Binary"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_ProfilePort</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="MSS_ProfileQuery" bindingOperationName="MSS_ProfileQuery" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="ProfileQuery Prod"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://soap.mobileid.swisscom.com/soap/services/MSS_ProfilePort</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ets="http://uri.etsi.org/TS102204/etsi204-kiuru.wsdl">
   <soap:Header/>
   <soap:Body>
      <ets:MSS_ProfileQuery>
         <MSS_ProfileReq MajorVersion="1" MinorVersion="1" xmlns:mss="http://uri.etsi.org/TS102204/v1.1.2#">
            <mss:AP_Info AP_ID="mid://dev.swisscom.ch" AP_PWD="" AP_TransID="TAN-${=new Date().format('yyyyMMddhhmmss')}" Instant="${=new Date().format('yyyy-MM-dd')}T${=new Date().format('HH:mm:ss.SSS')}"/>
            <mss:MSSP_Info>
               <mss:MSSP_ID>
                  <mss:URI>http://mid.swisscom.ch/</mss:URI>
               </mss:MSSP_ID>
            </mss:MSSP_Info>
            <mss:MobileUser>
               <mss:MSISDN>41797895164</mss:MSISDN>
            </mss:MobileUser>
         </MSS_ProfileReq>
      </ets:MSS_ProfileQuery>
   </soap:Body>
</soap:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://uri.etsi.org/TS102204/etsi204-kiuru.wsdl/MSS_ProfileQueryType/MSS_ProfileQueryRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:properties/><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>